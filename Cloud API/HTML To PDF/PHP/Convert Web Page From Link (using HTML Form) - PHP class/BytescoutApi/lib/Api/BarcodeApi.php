<?php
/**
 * BarcodeApi
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Api;

use \Bytescout\Client\Configuration;
use \Bytescout\Client\ApiClient;
use \Bytescout\Client\ApiException;
use \Bytescout\Client\ObjectSerializer;

/**
 * BarcodeApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BarcodeApi
{

    /**
     * API Client
     * @var \Bytescout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Bytescout\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bytescout.io');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Bytescout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Bytescout\Client\ApiClient $apiClient set the API client
     * @return BarcodeApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * barcodeGetBarcode
     *
     * Generate barcode
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param string $propertiesOutputFileType File format in which barcode will be generated.\r\n            Default value: PNG file (optional)
     * @param bool $propertiesTiffUse1BitFormat Default value: False (optional)
     * @param bool $propertiesProduceMonochromeImages Default value: False (optional)
     * @param string $propertiesAdditionalCaption Default value: (optional)
     * @param bool $propertiesAddChecksum Default value: False (optional)
     * @param bool $propertiesAddChecksumToCaption Default value: False (optional)
     * @param string $propertiesCaption  (optional)
     * @param bool $propertiesDrawCaption Default value: True (optional)
     * @param bool $propertiesDrawCaptionFor2DBarcodes Default value: False (optional)
     * @param bool $propertiesDrawQuietZones Default value: True (optional)
     * @param string $propertiesSymbology Default value: Code39 (optional)
     * @param string $propertiesSupplementValue Default value: (optional)
     * @param string $propertiesAdditionalCaptionFont Default value: Arial, 12 (optional)
     * @param int $propertiesBarHeight Default value: 50 (optional)
     * @param string $propertiesCaptionFont Default value: Arial, 12 (optional)
     * @param int $propertiesNarrowBarWidth Default value: 3 (optional)
     * @param int $propertiesWideToNarrowRatio Default value: 3 (optional)
     * @param string $propertiesAdditionalCaptionPosition Default value: Above (optional)
     * @param string $propertiesAngle Default value: Degrees0 (optional)
     * @param string $propertiesBackColor Default value: Color [White] (optional)
     * @param string $propertiesCaptionPosition Default value: Below (optional)
     * @param string $propertiesForeColor Default value: Color [Black] (optional)
     * @param float $propertiesMarginsTop Top margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsBottom Bottom margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsLeft Left margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsRight Right margin (in mm)\r\n            Default value: 10 (optional)
     * @param string $propertiesSmoothingMode Default value: Default (optional)
     * @param string $propertiesRenderingHint Default value: SystemDefault (optional)
     * @param float $propertiesResolutionX Default value: 96 (optional)
     * @param float $propertiesResolutionY Default value: 96 (optional)
     * @param bool $propertiesCutUnusedSpace Default value: False (optional)
     * @param bool $propertiesPreserveMinReadableSize Default value: True (optional)
     * @param float $propertiesSizeHeight Height of area (optional)
     * @param float $propertiesSizeWidth Width of area (optional)
     * @param string $propertiesSizeUnitOfMeasure Unit of measure.\r\n            Default value: Pixel (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeGetBarcode($apikey = null, $propertiesOutputFileType = null, $propertiesTiffUse1BitFormat = null, $propertiesProduceMonochromeImages = null, $propertiesAdditionalCaption = null, $propertiesAddChecksum = null, $propertiesAddChecksumToCaption = null, $propertiesCaption = null, $propertiesDrawCaption = null, $propertiesDrawCaptionFor2DBarcodes = null, $propertiesDrawQuietZones = null, $propertiesSymbology = null, $propertiesSupplementValue = null, $propertiesAdditionalCaptionFont = null, $propertiesBarHeight = null, $propertiesCaptionFont = null, $propertiesNarrowBarWidth = null, $propertiesWideToNarrowRatio = null, $propertiesAdditionalCaptionPosition = null, $propertiesAngle = null, $propertiesBackColor = null, $propertiesCaptionPosition = null, $propertiesForeColor = null, $propertiesMarginsTop = null, $propertiesMarginsBottom = null, $propertiesMarginsLeft = null, $propertiesMarginsRight = null, $propertiesSmoothingMode = null, $propertiesRenderingHint = null, $propertiesResolutionX = null, $propertiesResolutionY = null, $propertiesCutUnusedSpace = null, $propertiesPreserveMinReadableSize = null, $propertiesSizeHeight = null, $propertiesSizeWidth = null, $propertiesSizeUnitOfMeasure = null, $outputType = null, $input = null, $inputType = null)
    {
        list($response, $statusCode, $httpHeader) = $this->barcodeGetBarcodeWithHttpInfo ($apikey, $propertiesOutputFileType, $propertiesTiffUse1BitFormat, $propertiesProduceMonochromeImages, $propertiesAdditionalCaption, $propertiesAddChecksum, $propertiesAddChecksumToCaption, $propertiesCaption, $propertiesDrawCaption, $propertiesDrawCaptionFor2DBarcodes, $propertiesDrawQuietZones, $propertiesSymbology, $propertiesSupplementValue, $propertiesAdditionalCaptionFont, $propertiesBarHeight, $propertiesCaptionFont, $propertiesNarrowBarWidth, $propertiesWideToNarrowRatio, $propertiesAdditionalCaptionPosition, $propertiesAngle, $propertiesBackColor, $propertiesCaptionPosition, $propertiesForeColor, $propertiesMarginsTop, $propertiesMarginsBottom, $propertiesMarginsLeft, $propertiesMarginsRight, $propertiesSmoothingMode, $propertiesRenderingHint, $propertiesResolutionX, $propertiesResolutionY, $propertiesCutUnusedSpace, $propertiesPreserveMinReadableSize, $propertiesSizeHeight, $propertiesSizeWidth, $propertiesSizeUnitOfMeasure, $outputType, $input, $inputType);
        return $response; 
    }


    /**
     * barcodeGetBarcodeWithHttpInfo
     *
     * Generate barcode
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param string $propertiesOutputFileType File format in which barcode will be generated.\r\n            Default value: PNG file (optional)
     * @param bool $propertiesTiffUse1BitFormat Default value: False (optional)
     * @param bool $propertiesProduceMonochromeImages Default value: False (optional)
     * @param string $propertiesAdditionalCaption Default value: (optional)
     * @param bool $propertiesAddChecksum Default value: False (optional)
     * @param bool $propertiesAddChecksumToCaption Default value: False (optional)
     * @param string $propertiesCaption  (optional)
     * @param bool $propertiesDrawCaption Default value: True (optional)
     * @param bool $propertiesDrawCaptionFor2DBarcodes Default value: False (optional)
     * @param bool $propertiesDrawQuietZones Default value: True (optional)
     * @param string $propertiesSymbology Default value: Code39 (optional)
     * @param string $propertiesSupplementValue Default value: (optional)
     * @param string $propertiesAdditionalCaptionFont Default value: Arial, 12 (optional)
     * @param int $propertiesBarHeight Default value: 50 (optional)
     * @param string $propertiesCaptionFont Default value: Arial, 12 (optional)
     * @param int $propertiesNarrowBarWidth Default value: 3 (optional)
     * @param int $propertiesWideToNarrowRatio Default value: 3 (optional)
     * @param string $propertiesAdditionalCaptionPosition Default value: Above (optional)
     * @param string $propertiesAngle Default value: Degrees0 (optional)
     * @param string $propertiesBackColor Default value: Color [White] (optional)
     * @param string $propertiesCaptionPosition Default value: Below (optional)
     * @param string $propertiesForeColor Default value: Color [Black] (optional)
     * @param float $propertiesMarginsTop Top margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsBottom Bottom margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsLeft Left margin (in mm)\r\n            Default value: 10 (optional)
     * @param float $propertiesMarginsRight Right margin (in mm)\r\n            Default value: 10 (optional)
     * @param string $propertiesSmoothingMode Default value: Default (optional)
     * @param string $propertiesRenderingHint Default value: SystemDefault (optional)
     * @param float $propertiesResolutionX Default value: 96 (optional)
     * @param float $propertiesResolutionY Default value: 96 (optional)
     * @param bool $propertiesCutUnusedSpace Default value: False (optional)
     * @param bool $propertiesPreserveMinReadableSize Default value: True (optional)
     * @param float $propertiesSizeHeight Height of area (optional)
     * @param float $propertiesSizeWidth Width of area (optional)
     * @param string $propertiesSizeUnitOfMeasure Unit of measure.\r\n            Default value: Pixel (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeGetBarcodeWithHttpInfo($apikey = null, $propertiesOutputFileType = null, $propertiesTiffUse1BitFormat = null, $propertiesProduceMonochromeImages = null, $propertiesAdditionalCaption = null, $propertiesAddChecksum = null, $propertiesAddChecksumToCaption = null, $propertiesCaption = null, $propertiesDrawCaption = null, $propertiesDrawCaptionFor2DBarcodes = null, $propertiesDrawQuietZones = null, $propertiesSymbology = null, $propertiesSupplementValue = null, $propertiesAdditionalCaptionFont = null, $propertiesBarHeight = null, $propertiesCaptionFont = null, $propertiesNarrowBarWidth = null, $propertiesWideToNarrowRatio = null, $propertiesAdditionalCaptionPosition = null, $propertiesAngle = null, $propertiesBackColor = null, $propertiesCaptionPosition = null, $propertiesForeColor = null, $propertiesMarginsTop = null, $propertiesMarginsBottom = null, $propertiesMarginsLeft = null, $propertiesMarginsRight = null, $propertiesSmoothingMode = null, $propertiesRenderingHint = null, $propertiesResolutionX = null, $propertiesResolutionY = null, $propertiesCutUnusedSpace = null, $propertiesPreserveMinReadableSize = null, $propertiesSizeHeight = null, $propertiesSizeWidth = null, $propertiesSizeUnitOfMeasure = null, $outputType = null, $input = null, $inputType = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/v1/barcode/generate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }// query params
        
        if ($propertiesOutputFileType !== null) {
            $queryParams['properties.outputFileType'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOutputFileType);
        }// query params
        
        if ($propertiesTiffUse1BitFormat !== null) {
            $queryParams['properties.tiffUse1BitFormat'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTiffUse1BitFormat);
        }// query params
        
        if ($propertiesProduceMonochromeImages !== null) {
            $queryParams['properties.produceMonochromeImages'] = $this->apiClient->getSerializer()->toQueryValue($propertiesProduceMonochromeImages);
        }// query params
        
        if ($propertiesAdditionalCaption !== null) {
            $queryParams['properties.additionalCaption'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAdditionalCaption);
        }// query params
        
        if ($propertiesAddChecksum !== null) {
            $queryParams['properties.addChecksum'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAddChecksum);
        }// query params
        
        if ($propertiesAddChecksumToCaption !== null) {
            $queryParams['properties.addChecksumToCaption'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAddChecksumToCaption);
        }// query params
        
        if ($propertiesCaption !== null) {
            $queryParams['properties.caption'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCaption);
        }// query params
        
        if ($propertiesDrawCaption !== null) {
            $queryParams['properties.drawCaption'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDrawCaption);
        }// query params
        
        if ($propertiesDrawCaptionFor2DBarcodes !== null) {
            $queryParams['properties.drawCaptionFor2DBarcodes'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDrawCaptionFor2DBarcodes);
        }// query params
        
        if ($propertiesDrawQuietZones !== null) {
            $queryParams['properties.drawQuietZones'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDrawQuietZones);
        }// query params
        
        if ($propertiesSymbology !== null) {
            $queryParams['properties.symbology'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSymbology);
        }// query params
        
        if ($propertiesSupplementValue !== null) {
            $queryParams['properties.supplementValue'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSupplementValue);
        }// query params
        
        if ($propertiesAdditionalCaptionFont !== null) {
            $queryParams['properties.additionalCaptionFont'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAdditionalCaptionFont);
        }// query params
        
        if ($propertiesBarHeight !== null) {
            $queryParams['properties.barHeight'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarHeight);
        }// query params
        
        if ($propertiesCaptionFont !== null) {
            $queryParams['properties.captionFont'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCaptionFont);
        }// query params
        
        if ($propertiesNarrowBarWidth !== null) {
            $queryParams['properties.narrowBarWidth'] = $this->apiClient->getSerializer()->toQueryValue($propertiesNarrowBarWidth);
        }// query params
        
        if ($propertiesWideToNarrowRatio !== null) {
            $queryParams['properties.wideToNarrowRatio'] = $this->apiClient->getSerializer()->toQueryValue($propertiesWideToNarrowRatio);
        }// query params
        
        if ($propertiesAdditionalCaptionPosition !== null) {
            $queryParams['properties.additionalCaptionPosition'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAdditionalCaptionPosition);
        }// query params
        
        if ($propertiesAngle !== null) {
            $queryParams['properties.angle'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAngle);
        }// query params
        
        if ($propertiesBackColor !== null) {
            $queryParams['properties.backColor'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBackColor);
        }// query params
        
        if ($propertiesCaptionPosition !== null) {
            $queryParams['properties.captionPosition'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCaptionPosition);
        }// query params
        
        if ($propertiesForeColor !== null) {
            $queryParams['properties.foreColor'] = $this->apiClient->getSerializer()->toQueryValue($propertiesForeColor);
        }// query params
        
        if ($propertiesMarginsTop !== null) {
            $queryParams['properties.margins.top'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsTop);
        }// query params
        
        if ($propertiesMarginsBottom !== null) {
            $queryParams['properties.margins.bottom'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsBottom);
        }// query params
        
        if ($propertiesMarginsLeft !== null) {
            $queryParams['properties.margins.left'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsLeft);
        }// query params
        
        if ($propertiesMarginsRight !== null) {
            $queryParams['properties.margins.right'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsRight);
        }// query params
        
        if ($propertiesSmoothingMode !== null) {
            $queryParams['properties.smoothingMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSmoothingMode);
        }// query params
        
        if ($propertiesRenderingHint !== null) {
            $queryParams['properties.renderingHint'] = $this->apiClient->getSerializer()->toQueryValue($propertiesRenderingHint);
        }// query params
        
        if ($propertiesResolutionX !== null) {
            $queryParams['properties.resolutionX'] = $this->apiClient->getSerializer()->toQueryValue($propertiesResolutionX);
        }// query params
        
        if ($propertiesResolutionY !== null) {
            $queryParams['properties.resolutionY'] = $this->apiClient->getSerializer()->toQueryValue($propertiesResolutionY);
        }// query params
        
        if ($propertiesCutUnusedSpace !== null) {
            $queryParams['properties.cutUnusedSpace'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCutUnusedSpace);
        }// query params
        
        if ($propertiesPreserveMinReadableSize !== null) {
            $queryParams['properties.preserveMinReadableSize'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPreserveMinReadableSize);
        }// query params
        
        if ($propertiesSizeHeight !== null) {
            $queryParams['properties.size.height'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSizeHeight);
        }// query params
        
        if ($propertiesSizeWidth !== null) {
            $queryParams['properties.size.width'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSizeWidth);
        }// query params
        
        if ($propertiesSizeUnitOfMeasure !== null) {
            $queryParams['properties.size.unitOfMeasure'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSizeUnitOfMeasure);
        }// query params
        
        if ($outputType !== null) {
            $queryParams['outputType'] = $this->apiClient->getSerializer()->toQueryValue($outputType);
        }// query params
        
        if ($input !== null) {
            $queryParams['input'] = $this->apiClient->getSerializer()->toQueryValue($input);
        }// query params
        
        if ($inputType !== null) {
            $queryParams['inputType'] = $this->apiClient->getSerializer()->toQueryValue($inputType);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * barcodePostBarCode
     *
     * Generate barcode
     *
     * @param \Bytescout\Client\Model\BarcodeRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodePostBarCode($data, $apikey = null)
    {
        list($response, $statusCode, $httpHeader) = $this->barcodePostBarCodeWithHttpInfo ($data, $apikey);
        return $response; 
    }


    /**
     * barcodePostBarCodeWithHttpInfo
     *
     * Generate barcode
     *
     * @param \Bytescout\Client\Model\BarcodeRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodePostBarCodeWithHttpInfo($data, $apikey = null)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling barcodePostBarCode');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/barcode/generate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml'));
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
