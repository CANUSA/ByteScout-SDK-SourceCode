<?php
/**
 * PDFToHTMLApi
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Api;

use \Bytescout\Client\Configuration;
use \Bytescout\Client\ApiClient;
use \Bytescout\Client\ApiException;
use \Bytescout\Client\ObjectSerializer;

/**
 * PDFToHTMLApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PDFToHTMLApi
{

    /**
     * API Client
     * @var \Bytescout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Bytescout\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bytescout.io');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Bytescout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Bytescout\Client\ApiClient $apiClient set the API client
     * @return PDFToHTMLApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * pDFToHTMLHTMLExtractorGet
     *
     * Convert PDF document to HTML page
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of page (zero-based) of PDF file from which data will be extracted.\r\n            Default value: all pages (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which extracting of data will be finished.\r\n            Default value: all pages (optional)
     * @param float $propertiesDetectNewColumnBySpacesRatio Default value: 1.2 (optional)
     * @param bool $propertiesExtractInvisibleText Default value: True (optional)
     * @param bool $propertiesPreserveFormattingOnTextExtraction Default value: True (optional)
     * @param string $propertiesColumnDetectionMode Default value: ContentGroupsAndBorders (optional)
     * @param string $propertiesLineGroupingMode Default value: None (optional)
     * @param bool $propertiesDetectLinesInsteadOfParagraphs Default value: True (optional)
     * @param bool $propertiesTrimSpaces Default value: True (optional)
     * @param string $propertiesOutputImageFormat Default value: PNG (optional)
     * @param string $propertiesExtractionMode Default value: HTMLWithCSS (optional)
     * @param bool $propertiesOptimizeImages Default value: True (optional)
     * @param int $propertiesOutputPageWidth Default value: 1024 (optional)
     * @param bool $propertiesHighPrecisionTextPositioning Default value: True (optional)
     * @param bool $propertiesAddFontStyleHTMLTagsToText Default value: True (optional)
     * @param bool $propertiesControlsAsText Default value: False (optional)
     * @param bool $propertiesDetectHyperLinks Default value: True (optional)
     * @param string $propertiesPassword Default value: null (optional)
     * @param bool $propertiesCheckPermissions Default value: True (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFToHTMLHTMLExtractorGet($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesDetectNewColumnBySpacesRatio = null, $propertiesExtractInvisibleText = null, $propertiesPreserveFormattingOnTextExtraction = null, $propertiesColumnDetectionMode = null, $propertiesLineGroupingMode = null, $propertiesDetectLinesInsteadOfParagraphs = null, $propertiesTrimSpaces = null, $propertiesOutputImageFormat = null, $propertiesExtractionMode = null, $propertiesOptimizeImages = null, $propertiesOutputPageWidth = null, $propertiesHighPrecisionTextPositioning = null, $propertiesAddFontStyleHTMLTagsToText = null, $propertiesControlsAsText = null, $propertiesDetectHyperLinks = null, $propertiesPassword = null, $propertiesCheckPermissions = null, $outputType = null, $input = null, $inputType = null)
    {
        list($response, $statusCode, $httpHeader) = $this->pDFToHTMLHTMLExtractorGetWithHttpInfo ($apikey, $propertiesStartPageIndex, $propertiesEndPageIndex, $propertiesDetectNewColumnBySpacesRatio, $propertiesExtractInvisibleText, $propertiesPreserveFormattingOnTextExtraction, $propertiesColumnDetectionMode, $propertiesLineGroupingMode, $propertiesDetectLinesInsteadOfParagraphs, $propertiesTrimSpaces, $propertiesOutputImageFormat, $propertiesExtractionMode, $propertiesOptimizeImages, $propertiesOutputPageWidth, $propertiesHighPrecisionTextPositioning, $propertiesAddFontStyleHTMLTagsToText, $propertiesControlsAsText, $propertiesDetectHyperLinks, $propertiesPassword, $propertiesCheckPermissions, $outputType, $input, $inputType);
        return $response; 
    }


    /**
     * pDFToHTMLHTMLExtractorGetWithHttpInfo
     *
     * Convert PDF document to HTML page
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of page (zero-based) of PDF file from which data will be extracted.\r\n            Default value: all pages (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which extracting of data will be finished.\r\n            Default value: all pages (optional)
     * @param float $propertiesDetectNewColumnBySpacesRatio Default value: 1.2 (optional)
     * @param bool $propertiesExtractInvisibleText Default value: True (optional)
     * @param bool $propertiesPreserveFormattingOnTextExtraction Default value: True (optional)
     * @param string $propertiesColumnDetectionMode Default value: ContentGroupsAndBorders (optional)
     * @param string $propertiesLineGroupingMode Default value: None (optional)
     * @param bool $propertiesDetectLinesInsteadOfParagraphs Default value: True (optional)
     * @param bool $propertiesTrimSpaces Default value: True (optional)
     * @param string $propertiesOutputImageFormat Default value: PNG (optional)
     * @param string $propertiesExtractionMode Default value: HTMLWithCSS (optional)
     * @param bool $propertiesOptimizeImages Default value: True (optional)
     * @param int $propertiesOutputPageWidth Default value: 1024 (optional)
     * @param bool $propertiesHighPrecisionTextPositioning Default value: True (optional)
     * @param bool $propertiesAddFontStyleHTMLTagsToText Default value: True (optional)
     * @param bool $propertiesControlsAsText Default value: False (optional)
     * @param bool $propertiesDetectHyperLinks Default value: True (optional)
     * @param string $propertiesPassword Default value: null (optional)
     * @param bool $propertiesCheckPermissions Default value: True (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFToHTMLHTMLExtractorGetWithHttpInfo($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesDetectNewColumnBySpacesRatio = null, $propertiesExtractInvisibleText = null, $propertiesPreserveFormattingOnTextExtraction = null, $propertiesColumnDetectionMode = null, $propertiesLineGroupingMode = null, $propertiesDetectLinesInsteadOfParagraphs = null, $propertiesTrimSpaces = null, $propertiesOutputImageFormat = null, $propertiesExtractionMode = null, $propertiesOptimizeImages = null, $propertiesOutputPageWidth = null, $propertiesHighPrecisionTextPositioning = null, $propertiesAddFontStyleHTMLTagsToText = null, $propertiesControlsAsText = null, $propertiesDetectHyperLinks = null, $propertiesPassword = null, $propertiesCheckPermissions = null, $outputType = null, $input = null, $inputType = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/v1/pdftohtml/htmlextractor/extract";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }// query params
        
        if ($propertiesStartPageIndex !== null) {
            $queryParams['properties.startPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesStartPageIndex);
        }// query params
        
        if ($propertiesEndPageIndex !== null) {
            $queryParams['properties.endPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesEndPageIndex);
        }// query params
        
        if ($propertiesDetectNewColumnBySpacesRatio !== null) {
            $queryParams['properties.detectNewColumnBySpacesRatio'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDetectNewColumnBySpacesRatio);
        }// query params
        
        if ($propertiesExtractInvisibleText !== null) {
            $queryParams['properties.extractInvisibleText'] = $this->apiClient->getSerializer()->toQueryValue($propertiesExtractInvisibleText);
        }// query params
        
        if ($propertiesPreserveFormattingOnTextExtraction !== null) {
            $queryParams['properties.preserveFormattingOnTextExtraction'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPreserveFormattingOnTextExtraction);
        }// query params
        
        if ($propertiesColumnDetectionMode !== null) {
            $queryParams['properties.columnDetectionMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesColumnDetectionMode);
        }// query params
        
        if ($propertiesLineGroupingMode !== null) {
            $queryParams['properties.lineGroupingMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesLineGroupingMode);
        }// query params
        
        if ($propertiesDetectLinesInsteadOfParagraphs !== null) {
            $queryParams['properties.detectLinesInsteadOfParagraphs'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDetectLinesInsteadOfParagraphs);
        }// query params
        
        if ($propertiesTrimSpaces !== null) {
            $queryParams['properties.trimSpaces'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTrimSpaces);
        }// query params
        
        if ($propertiesOutputImageFormat !== null) {
            $queryParams['properties.outputImageFormat'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOutputImageFormat);
        }// query params
        
        if ($propertiesExtractionMode !== null) {
            $queryParams['properties.extractionMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesExtractionMode);
        }// query params
        
        if ($propertiesOptimizeImages !== null) {
            $queryParams['properties.optimizeImages'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOptimizeImages);
        }// query params
        
        if ($propertiesOutputPageWidth !== null) {
            $queryParams['properties.outputPageWidth'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOutputPageWidth);
        }// query params
        
        if ($propertiesHighPrecisionTextPositioning !== null) {
            $queryParams['properties.highPrecisionTextPositioning'] = $this->apiClient->getSerializer()->toQueryValue($propertiesHighPrecisionTextPositioning);
        }// query params
        
        if ($propertiesAddFontStyleHTMLTagsToText !== null) {
            $queryParams['properties.addFontStyleHTMLTagsToText'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAddFontStyleHTMLTagsToText);
        }// query params
        
        if ($propertiesControlsAsText !== null) {
            $queryParams['properties.controlsAsText'] = $this->apiClient->getSerializer()->toQueryValue($propertiesControlsAsText);
        }// query params
        
        if ($propertiesDetectHyperLinks !== null) {
            $queryParams['properties.detectHyperLinks'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDetectHyperLinks);
        }// query params
        
        if ($propertiesPassword !== null) {
            $queryParams['properties.password'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPassword);
        }// query params
        
        if ($propertiesCheckPermissions !== null) {
            $queryParams['properties.checkPermissions'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCheckPermissions);
        }// query params
        
        if ($outputType !== null) {
            $queryParams['outputType'] = $this->apiClient->getSerializer()->toQueryValue($outputType);
        }// query params
        
        if ($input !== null) {
            $queryParams['input'] = $this->apiClient->getSerializer()->toQueryValue($input);
        }// query params
        
        if ($inputType !== null) {
            $queryParams['inputType'] = $this->apiClient->getSerializer()->toQueryValue($inputType);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * pDFToHTMLHTMLExtractorPost
     *
     * Convert PDF document to HTML page
     *
     * @param \Bytescout\Client\Model\HTMLExtractorRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFToHTMLHTMLExtractorPost($data, $apikey = null)
    {
        list($response, $statusCode, $httpHeader) = $this->pDFToHTMLHTMLExtractorPostWithHttpInfo ($data, $apikey);
        return $response; 
    }


    /**
     * pDFToHTMLHTMLExtractorPostWithHttpInfo
     *
     * Convert PDF document to HTML page
     *
     * @param \Bytescout\Client\Model\HTMLExtractorRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFToHTMLHTMLExtractorPostWithHttpInfo($data, $apikey = null)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling pDFToHTMLHTMLExtractorPost');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/pdftohtml/htmlextractor/extract";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml'));
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
