<?php
/**
 * PDFRendererApi
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Api;

use \Bytescout\Client\Configuration;
use \Bytescout\Client\ApiClient;
use \Bytescout\Client\ApiException;
use \Bytescout\Client\ObjectSerializer;

/**
 * PDFRendererApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PDFRendererApi
{

    /**
     * API Client
     * @var \Bytescout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Bytescout\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bytescout.io');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Bytescout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Bytescout\Client\ApiClient $apiClient set the API client
     * @return PDFRendererApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * pDFRendererPdfRasterRendererGet
     *
     * Convert PDF document to PNG, JPEG, TIFF, BMP images
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of a page (zero-based) from which images will be generated (for RasterOutputFormat is TIFF). (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which generating of images will be finished (for RasterOutputFormat is TIFF). (optional)
     * @param string $propertiesTiffCompression Defines TIFF image compression. (for RasterOutputFormat is TIFF).\r\n            Default value: JPEG (optional)
     * @param int $propertiesPageIndex Index of a page (zero-based) from which image will be generated (for RasterOutputFormat is not TIFF).\r\n            Default value: 0 (first page) (optional)
     * @param float $propertiesResolution Default value: 300 (optional)
     * @param bool $propertiesUseEmbeddedFonts Default value: True (optional)
     * @param bool $propertiesTextLayerEnabled Default value: True (optional)
     * @param bool $propertiesVectorLayerEnabled Default value: True (optional)
     * @param bool $propertiesImageLayerEnabled Default value: True (optional)
     * @param bool $propertiesSupportJBIGDecoding Default value: True (optional)
     * @param int $propertiesJpegQuality Default value: 80 (optional)
     * @param string $propertiesPassword Default value: \&quot;\&quot; (optional)
     * @param string $propertiesTextSmoothingMode Default value: HighQuality (optional)
     * @param string $propertiesVectorSmoothingMode Default value: HighQuality (optional)
     * @param string $propertiesImageInterpolationMode Default value: HighQuality (optional)
     * @param string $propertiesRasterOutputFormat File format in which page of PDF file will be generated.\r\n            Default value: PNG file (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFRendererPdfRasterRendererGet($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesTiffCompression = null, $propertiesPageIndex = null, $propertiesResolution = null, $propertiesUseEmbeddedFonts = null, $propertiesTextLayerEnabled = null, $propertiesVectorLayerEnabled = null, $propertiesImageLayerEnabled = null, $propertiesSupportJBIGDecoding = null, $propertiesJpegQuality = null, $propertiesPassword = null, $propertiesTextSmoothingMode = null, $propertiesVectorSmoothingMode = null, $propertiesImageInterpolationMode = null, $propertiesRasterOutputFormat = null, $outputType = null, $input = null, $inputType = null)
    {
        list($response, $statusCode, $httpHeader) = $this->pDFRendererPdfRasterRendererGetWithHttpInfo ($apikey, $propertiesStartPageIndex, $propertiesEndPageIndex, $propertiesTiffCompression, $propertiesPageIndex, $propertiesResolution, $propertiesUseEmbeddedFonts, $propertiesTextLayerEnabled, $propertiesVectorLayerEnabled, $propertiesImageLayerEnabled, $propertiesSupportJBIGDecoding, $propertiesJpegQuality, $propertiesPassword, $propertiesTextSmoothingMode, $propertiesVectorSmoothingMode, $propertiesImageInterpolationMode, $propertiesRasterOutputFormat, $outputType, $input, $inputType);
        return $response; 
    }


    /**
     * pDFRendererPdfRasterRendererGetWithHttpInfo
     *
     * Convert PDF document to PNG, JPEG, TIFF, BMP images
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of a page (zero-based) from which images will be generated (for RasterOutputFormat is TIFF). (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which generating of images will be finished (for RasterOutputFormat is TIFF). (optional)
     * @param string $propertiesTiffCompression Defines TIFF image compression. (for RasterOutputFormat is TIFF).\r\n            Default value: JPEG (optional)
     * @param int $propertiesPageIndex Index of a page (zero-based) from which image will be generated (for RasterOutputFormat is not TIFF).\r\n            Default value: 0 (first page) (optional)
     * @param float $propertiesResolution Default value: 300 (optional)
     * @param bool $propertiesUseEmbeddedFonts Default value: True (optional)
     * @param bool $propertiesTextLayerEnabled Default value: True (optional)
     * @param bool $propertiesVectorLayerEnabled Default value: True (optional)
     * @param bool $propertiesImageLayerEnabled Default value: True (optional)
     * @param bool $propertiesSupportJBIGDecoding Default value: True (optional)
     * @param int $propertiesJpegQuality Default value: 80 (optional)
     * @param string $propertiesPassword Default value: \&quot;\&quot; (optional)
     * @param string $propertiesTextSmoothingMode Default value: HighQuality (optional)
     * @param string $propertiesVectorSmoothingMode Default value: HighQuality (optional)
     * @param string $propertiesImageInterpolationMode Default value: HighQuality (optional)
     * @param string $propertiesRasterOutputFormat File format in which page of PDF file will be generated.\r\n            Default value: PNG file (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFRendererPdfRasterRendererGetWithHttpInfo($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesTiffCompression = null, $propertiesPageIndex = null, $propertiesResolution = null, $propertiesUseEmbeddedFonts = null, $propertiesTextLayerEnabled = null, $propertiesVectorLayerEnabled = null, $propertiesImageLayerEnabled = null, $propertiesSupportJBIGDecoding = null, $propertiesJpegQuality = null, $propertiesPassword = null, $propertiesTextSmoothingMode = null, $propertiesVectorSmoothingMode = null, $propertiesImageInterpolationMode = null, $propertiesRasterOutputFormat = null, $outputType = null, $input = null, $inputType = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/v1/pdfrenderer/render";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }// query params
        
        if ($propertiesStartPageIndex !== null) {
            $queryParams['properties.startPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesStartPageIndex);
        }// query params
        
        if ($propertiesEndPageIndex !== null) {
            $queryParams['properties.endPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesEndPageIndex);
        }// query params
        
        if ($propertiesTiffCompression !== null) {
            $queryParams['properties.tiffCompression'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTiffCompression);
        }// query params
        
        if ($propertiesPageIndex !== null) {
            $queryParams['properties.pageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPageIndex);
        }// query params
        
        if ($propertiesResolution !== null) {
            $queryParams['properties.resolution'] = $this->apiClient->getSerializer()->toQueryValue($propertiesResolution);
        }// query params
        
        if ($propertiesUseEmbeddedFonts !== null) {
            $queryParams['properties.useEmbeddedFonts'] = $this->apiClient->getSerializer()->toQueryValue($propertiesUseEmbeddedFonts);
        }// query params
        
        if ($propertiesTextLayerEnabled !== null) {
            $queryParams['properties.textLayerEnabled'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTextLayerEnabled);
        }// query params
        
        if ($propertiesVectorLayerEnabled !== null) {
            $queryParams['properties.vectorLayerEnabled'] = $this->apiClient->getSerializer()->toQueryValue($propertiesVectorLayerEnabled);
        }// query params
        
        if ($propertiesImageLayerEnabled !== null) {
            $queryParams['properties.imageLayerEnabled'] = $this->apiClient->getSerializer()->toQueryValue($propertiesImageLayerEnabled);
        }// query params
        
        if ($propertiesSupportJBIGDecoding !== null) {
            $queryParams['properties.supportJBIGDecoding'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSupportJBIGDecoding);
        }// query params
        
        if ($propertiesJpegQuality !== null) {
            $queryParams['properties.jpegQuality'] = $this->apiClient->getSerializer()->toQueryValue($propertiesJpegQuality);
        }// query params
        
        if ($propertiesPassword !== null) {
            $queryParams['properties.password'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPassword);
        }// query params
        
        if ($propertiesTextSmoothingMode !== null) {
            $queryParams['properties.textSmoothingMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTextSmoothingMode);
        }// query params
        
        if ($propertiesVectorSmoothingMode !== null) {
            $queryParams['properties.vectorSmoothingMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesVectorSmoothingMode);
        }// query params
        
        if ($propertiesImageInterpolationMode !== null) {
            $queryParams['properties.imageInterpolationMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesImageInterpolationMode);
        }// query params
        
        if ($propertiesRasterOutputFormat !== null) {
            $queryParams['properties.rasterOutputFormat'] = $this->apiClient->getSerializer()->toQueryValue($propertiesRasterOutputFormat);
        }// query params
        
        if ($outputType !== null) {
            $queryParams['outputType'] = $this->apiClient->getSerializer()->toQueryValue($outputType);
        }// query params
        
        if ($input !== null) {
            $queryParams['input'] = $this->apiClient->getSerializer()->toQueryValue($input);
        }// query params
        
        if ($inputType !== null) {
            $queryParams['inputType'] = $this->apiClient->getSerializer()->toQueryValue($inputType);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * pDFRendererPdfRasterRendererPost
     *
     * Convert PDF document to PNG, JPEG, TIFF, BMP images
     *
     * @param \Bytescout\Client\Model\PdfRasterRendererRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFRendererPdfRasterRendererPost($data, $apikey = null)
    {
        list($response, $statusCode, $httpHeader) = $this->pDFRendererPdfRasterRendererPostWithHttpInfo ($data, $apikey);
        return $response; 
    }


    /**
     * pDFRendererPdfRasterRendererPostWithHttpInfo
     *
     * Convert PDF document to PNG, JPEG, TIFF, BMP images
     *
     * @param \Bytescout\Client\Model\PdfRasterRendererRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function pDFRendererPdfRasterRendererPostWithHttpInfo($data, $apikey = null)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling pDFRendererPdfRasterRendererPost');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/pdfrenderer/render";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml'));
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
