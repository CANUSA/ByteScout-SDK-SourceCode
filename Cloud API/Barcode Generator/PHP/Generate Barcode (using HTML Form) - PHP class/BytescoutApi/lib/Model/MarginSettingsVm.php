<?php
/**
 * MarginSettingsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * MarginSettingsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MarginSettingsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'bottom' => 'double',
        'left' => 'double',
        'right' => 'double',
        'top' => 'double',
        'unit' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'bottom' => 'bottom',
        'left' => 'left',
        'right' => 'right',
        'top' => 'top',
        'unit' => 'unit'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'bottom' => 'setBottom',
        'left' => 'setLeft',
        'right' => 'setRight',
        'top' => 'setTop',
        'unit' => 'setUnit'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'bottom' => 'getBottom',
        'left' => 'getLeft',
        'right' => 'getRight',
        'top' => 'getTop',
        'unit' => 'getUnit'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $bottom 
      * @var double
      */
    protected $bottom;
    
    /**
      * $left 
      * @var double
      */
    protected $left;
    
    /**
      * $right 
      * @var double
      */
    protected $right;
    
    /**
      * $top 
      * @var double
      */
    protected $top;
    
    /**
      * $unit Default value: Millimeters
      * @var string
      */
    protected $unit;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->bottom = $data["bottom"];
            $this->left = $data["left"];
            $this->right = $data["right"];
            $this->top = $data["top"];
            $this->unit = $data["unit"];
        }
    }
    
    /**
     * Gets bottom
     * @return double
     */
    public function getBottom()
    {
        return $this->bottom;
    }
  
    /**
     * Sets bottom
     * @param double $bottom 
     * @return $this
     */
    public function setBottom($bottom)
    {
        
        $this->bottom = $bottom;
        return $this;
    }
    
    /**
     * Gets left
     * @return double
     */
    public function getLeft()
    {
        return $this->left;
    }
  
    /**
     * Sets left
     * @param double $left 
     * @return $this
     */
    public function setLeft($left)
    {
        
        $this->left = $left;
        return $this;
    }
    
    /**
     * Gets right
     * @return double
     */
    public function getRight()
    {
        return $this->right;
    }
  
    /**
     * Sets right
     * @param double $right 
     * @return $this
     */
    public function setRight($right)
    {
        
        $this->right = $right;
        return $this;
    }
    
    /**
     * Gets top
     * @return double
     */
    public function getTop()
    {
        return $this->top;
    }
  
    /**
     * Sets top
     * @param double $top 
     * @return $this
     */
    public function setTop($top)
    {
        
        $this->top = $top;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit Default value: Millimeters
     * @return $this
     */
    public function setUnit($unit)
    {
        $allowed_values = array("inches", "millimeters", "centimeters");
        if (!in_array($unit, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'unit', must be one of 'inches', 'millimeters', 'centimeters'");
        }
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
