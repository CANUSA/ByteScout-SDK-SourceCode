<?php
/**
 * HTMLExtractorOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * HTMLExtractorOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HTMLExtractorOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'startPageIndex' => 'int',
        'endPageIndex' => 'int',
        'detectNewColumnBySpacesRatio' => 'float',
        'extractInvisibleText' => 'bool',
        'preserveFormattingOnTextExtraction' => 'bool',
        'columnDetectionMode' => 'string',
        'lineGroupingMode' => 'string',
        'detectLinesInsteadOfParagraphs' => 'bool',
        'trimSpaces' => 'bool',
        'outputImageFormat' => 'string',
        'extractionMode' => 'string',
        'optimizeImages' => 'bool',
        'outputPageWidth' => 'int',
        'highPrecisionTextPositioning' => 'bool',
        'addFontStyleHTMLTagsToText' => 'bool',
        'controlsAsText' => 'bool',
        'detectHyperLinks' => 'bool',
        'password' => 'string',
        'checkPermissions' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'startPageIndex' => 'startPageIndex',
        'endPageIndex' => 'endPageIndex',
        'detectNewColumnBySpacesRatio' => 'detectNewColumnBySpacesRatio',
        'extractInvisibleText' => 'extractInvisibleText',
        'preserveFormattingOnTextExtraction' => 'preserveFormattingOnTextExtraction',
        'columnDetectionMode' => 'columnDetectionMode',
        'lineGroupingMode' => 'lineGroupingMode',
        'detectLinesInsteadOfParagraphs' => 'detectLinesInsteadOfParagraphs',
        'trimSpaces' => 'trimSpaces',
        'outputImageFormat' => 'outputImageFormat',
        'extractionMode' => 'extractionMode',
        'optimizeImages' => 'optimizeImages',
        'outputPageWidth' => 'outputPageWidth',
        'highPrecisionTextPositioning' => 'highPrecisionTextPositioning',
        'addFontStyleHTMLTagsToText' => 'addFontStyleHTMLTagsToText',
        'controlsAsText' => 'controlsAsText',
        'detectHyperLinks' => 'detectHyperLinks',
        'password' => 'password',
        'checkPermissions' => 'checkPermissions'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'startPageIndex' => 'setStartPageIndex',
        'endPageIndex' => 'setEndPageIndex',
        'detectNewColumnBySpacesRatio' => 'setDetectNewColumnBySpacesRatio',
        'extractInvisibleText' => 'setExtractInvisibleText',
        'preserveFormattingOnTextExtraction' => 'setPreserveFormattingOnTextExtraction',
        'columnDetectionMode' => 'setColumnDetectionMode',
        'lineGroupingMode' => 'setLineGroupingMode',
        'detectLinesInsteadOfParagraphs' => 'setDetectLinesInsteadOfParagraphs',
        'trimSpaces' => 'setTrimSpaces',
        'outputImageFormat' => 'setOutputImageFormat',
        'extractionMode' => 'setExtractionMode',
        'optimizeImages' => 'setOptimizeImages',
        'outputPageWidth' => 'setOutputPageWidth',
        'highPrecisionTextPositioning' => 'setHighPrecisionTextPositioning',
        'addFontStyleHTMLTagsToText' => 'setAddFontStyleHTMLTagsToText',
        'controlsAsText' => 'setControlsAsText',
        'detectHyperLinks' => 'setDetectHyperLinks',
        'password' => 'setPassword',
        'checkPermissions' => 'setCheckPermissions'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'startPageIndex' => 'getStartPageIndex',
        'endPageIndex' => 'getEndPageIndex',
        'detectNewColumnBySpacesRatio' => 'getDetectNewColumnBySpacesRatio',
        'extractInvisibleText' => 'getExtractInvisibleText',
        'preserveFormattingOnTextExtraction' => 'getPreserveFormattingOnTextExtraction',
        'columnDetectionMode' => 'getColumnDetectionMode',
        'lineGroupingMode' => 'getLineGroupingMode',
        'detectLinesInsteadOfParagraphs' => 'getDetectLinesInsteadOfParagraphs',
        'trimSpaces' => 'getTrimSpaces',
        'outputImageFormat' => 'getOutputImageFormat',
        'extractionMode' => 'getExtractionMode',
        'optimizeImages' => 'getOptimizeImages',
        'outputPageWidth' => 'getOutputPageWidth',
        'highPrecisionTextPositioning' => 'getHighPrecisionTextPositioning',
        'addFontStyleHTMLTagsToText' => 'getAddFontStyleHTMLTagsToText',
        'controlsAsText' => 'getControlsAsText',
        'detectHyperLinks' => 'getDetectHyperLinks',
        'password' => 'getPassword',
        'checkPermissions' => 'getCheckPermissions'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $startPageIndex Index of page (zero-based) of PDF file from which data will be extracted.\r\n            Default value: all pages
      * @var int
      */
    protected $startPageIndex;
    
    /**
      * $endPageIndex Index of a page (zero-based) on which extracting of data will be finished.\r\n            Default value: all pages
      * @var int
      */
    protected $endPageIndex;
    
    /**
      * $detectNewColumnBySpacesRatio Default value: 1.2
      * @var float
      */
    protected $detectNewColumnBySpacesRatio;
    
    /**
      * $extractInvisibleText Default value: True
      * @var bool
      */
    protected $extractInvisibleText;
    
    /**
      * $preserveFormattingOnTextExtraction Default value: True
      * @var bool
      */
    protected $preserveFormattingOnTextExtraction;
    
    /**
      * $columnDetectionMode Default value: ContentGroupsAndBorders
      * @var string
      */
    protected $columnDetectionMode;
    
    /**
      * $lineGroupingMode Default value: None
      * @var string
      */
    protected $lineGroupingMode;
    
    /**
      * $detectLinesInsteadOfParagraphs Default value: True
      * @var bool
      */
    protected $detectLinesInsteadOfParagraphs;
    
    /**
      * $trimSpaces Default value: True
      * @var bool
      */
    protected $trimSpaces;
    
    /**
      * $outputImageFormat Default value: PNG
      * @var string
      */
    protected $outputImageFormat;
    
    /**
      * $extractionMode Default value: HTMLWithCSS
      * @var string
      */
    protected $extractionMode;
    
    /**
      * $optimizeImages Default value: True
      * @var bool
      */
    protected $optimizeImages;
    
    /**
      * $outputPageWidth Default value: 1024
      * @var int
      */
    protected $outputPageWidth;
    
    /**
      * $highPrecisionTextPositioning Default value: True
      * @var bool
      */
    protected $highPrecisionTextPositioning;
    
    /**
      * $addFontStyleHTMLTagsToText Default value: True
      * @var bool
      */
    protected $addFontStyleHTMLTagsToText;
    
    /**
      * $controlsAsText Default value: False
      * @var bool
      */
    protected $controlsAsText;
    
    /**
      * $detectHyperLinks Default value: True
      * @var bool
      */
    protected $detectHyperLinks;
    
    /**
      * $password Default value: null
      * @var string
      */
    protected $password;
    
    /**
      * $checkPermissions Default value: True
      * @var bool
      */
    protected $checkPermissions;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->startPageIndex = $data["startPageIndex"];
            $this->endPageIndex = $data["endPageIndex"];
            $this->detectNewColumnBySpacesRatio = $data["detectNewColumnBySpacesRatio"];
            $this->extractInvisibleText = $data["extractInvisibleText"];
            $this->preserveFormattingOnTextExtraction = $data["preserveFormattingOnTextExtraction"];
            $this->columnDetectionMode = $data["columnDetectionMode"];
            $this->lineGroupingMode = $data["lineGroupingMode"];
            $this->detectLinesInsteadOfParagraphs = $data["detectLinesInsteadOfParagraphs"];
            $this->trimSpaces = $data["trimSpaces"];
            $this->outputImageFormat = $data["outputImageFormat"];
            $this->extractionMode = $data["extractionMode"];
            $this->optimizeImages = $data["optimizeImages"];
            $this->outputPageWidth = $data["outputPageWidth"];
            $this->highPrecisionTextPositioning = $data["highPrecisionTextPositioning"];
            $this->addFontStyleHTMLTagsToText = $data["addFontStyleHTMLTagsToText"];
            $this->controlsAsText = $data["controlsAsText"];
            $this->detectHyperLinks = $data["detectHyperLinks"];
            $this->password = $data["password"];
            $this->checkPermissions = $data["checkPermissions"];
        }
    }
    
    /**
     * Gets startPageIndex
     * @return int
     */
    public function getStartPageIndex()
    {
        return $this->startPageIndex;
    }
  
    /**
     * Sets startPageIndex
     * @param int $startPageIndex Index of page (zero-based) of PDF file from which data will be extracted.\r\n            Default value: all pages
     * @return $this
     */
    public function setStartPageIndex($startPageIndex)
    {
        
        $this->startPageIndex = $startPageIndex;
        return $this;
    }
    
    /**
     * Gets endPageIndex
     * @return int
     */
    public function getEndPageIndex()
    {
        return $this->endPageIndex;
    }
  
    /**
     * Sets endPageIndex
     * @param int $endPageIndex Index of a page (zero-based) on which extracting of data will be finished.\r\n            Default value: all pages
     * @return $this
     */
    public function setEndPageIndex($endPageIndex)
    {
        
        $this->endPageIndex = $endPageIndex;
        return $this;
    }
    
    /**
     * Gets detectNewColumnBySpacesRatio
     * @return float
     */
    public function getDetectNewColumnBySpacesRatio()
    {
        return $this->detectNewColumnBySpacesRatio;
    }
  
    /**
     * Sets detectNewColumnBySpacesRatio
     * @param float $detectNewColumnBySpacesRatio Default value: 1.2
     * @return $this
     */
    public function setDetectNewColumnBySpacesRatio($detectNewColumnBySpacesRatio)
    {
        
        $this->detectNewColumnBySpacesRatio = $detectNewColumnBySpacesRatio;
        return $this;
    }
    
    /**
     * Gets extractInvisibleText
     * @return bool
     */
    public function getExtractInvisibleText()
    {
        return $this->extractInvisibleText;
    }
  
    /**
     * Sets extractInvisibleText
     * @param bool $extractInvisibleText Default value: True
     * @return $this
     */
    public function setExtractInvisibleText($extractInvisibleText)
    {
        
        $this->extractInvisibleText = $extractInvisibleText;
        return $this;
    }
    
    /**
     * Gets preserveFormattingOnTextExtraction
     * @return bool
     */
    public function getPreserveFormattingOnTextExtraction()
    {
        return $this->preserveFormattingOnTextExtraction;
    }
  
    /**
     * Sets preserveFormattingOnTextExtraction
     * @param bool $preserveFormattingOnTextExtraction Default value: True
     * @return $this
     */
    public function setPreserveFormattingOnTextExtraction($preserveFormattingOnTextExtraction)
    {
        
        $this->preserveFormattingOnTextExtraction = $preserveFormattingOnTextExtraction;
        return $this;
    }
    
    /**
     * Gets columnDetectionMode
     * @return string
     */
    public function getColumnDetectionMode()
    {
        return $this->columnDetectionMode;
    }
  
    /**
     * Sets columnDetectionMode
     * @param string $columnDetectionMode Default value: ContentGroupsAndBorders
     * @return $this
     */
    public function setColumnDetectionMode($columnDetectionMode)
    {
        $allowed_values = array("contentGroupsAndBorders", "contentGroups", "borders");
        if (!in_array($columnDetectionMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'columnDetectionMode', must be one of 'contentGroupsAndBorders', 'contentGroups', 'borders'");
        }
        $this->columnDetectionMode = $columnDetectionMode;
        return $this;
    }
    
    /**
     * Gets lineGroupingMode
     * @return string
     */
    public function getLineGroupingMode()
    {
        return $this->lineGroupingMode;
    }
  
    /**
     * Sets lineGroupingMode
     * @param string $lineGroupingMode Default value: None
     * @return $this
     */
    public function setLineGroupingMode($lineGroupingMode)
    {
        $allowed_values = array("none", "groupByRows", "groupByColumns");
        if (!in_array($lineGroupingMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'lineGroupingMode', must be one of 'none', 'groupByRows', 'groupByColumns'");
        }
        $this->lineGroupingMode = $lineGroupingMode;
        return $this;
    }
    
    /**
     * Gets detectLinesInsteadOfParagraphs
     * @return bool
     */
    public function getDetectLinesInsteadOfParagraphs()
    {
        return $this->detectLinesInsteadOfParagraphs;
    }
  
    /**
     * Sets detectLinesInsteadOfParagraphs
     * @param bool $detectLinesInsteadOfParagraphs Default value: True
     * @return $this
     */
    public function setDetectLinesInsteadOfParagraphs($detectLinesInsteadOfParagraphs)
    {
        
        $this->detectLinesInsteadOfParagraphs = $detectLinesInsteadOfParagraphs;
        return $this;
    }
    
    /**
     * Gets trimSpaces
     * @return bool
     */
    public function getTrimSpaces()
    {
        return $this->trimSpaces;
    }
  
    /**
     * Sets trimSpaces
     * @param bool $trimSpaces Default value: True
     * @return $this
     */
    public function setTrimSpaces($trimSpaces)
    {
        
        $this->trimSpaces = $trimSpaces;
        return $this;
    }
    
    /**
     * Gets outputImageFormat
     * @return string
     */
    public function getOutputImageFormat()
    {
        return $this->outputImageFormat;
    }
  
    /**
     * Sets outputImageFormat
     * @param string $outputImageFormat Default value: PNG
     * @return $this
     */
    public function setOutputImageFormat($outputImageFormat)
    {
        $allowed_values = array("png", "bmp", "tiff", "jpeg", "gif", "emf");
        if (!in_array($outputImageFormat, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'outputImageFormat', must be one of 'png', 'bmp', 'tiff', 'jpeg', 'gif', 'emf'");
        }
        $this->outputImageFormat = $outputImageFormat;
        return $this;
    }
    
    /**
     * Gets extractionMode
     * @return string
     */
    public function getExtractionMode()
    {
        return $this->extractionMode;
    }
  
    /**
     * Sets extractionMode
     * @param string $extractionMode Default value: HTMLWithCSS
     * @return $this
     */
    public function setExtractionMode($extractionMode)
    {
        $allowed_values = array("plainHTML", "htmlWithCSS");
        if (!in_array($extractionMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'extractionMode', must be one of 'plainHTML', 'htmlWithCSS'");
        }
        $this->extractionMode = $extractionMode;
        return $this;
    }
    
    /**
     * Gets optimizeImages
     * @return bool
     */
    public function getOptimizeImages()
    {
        return $this->optimizeImages;
    }
  
    /**
     * Sets optimizeImages
     * @param bool $optimizeImages Default value: True
     * @return $this
     */
    public function setOptimizeImages($optimizeImages)
    {
        
        $this->optimizeImages = $optimizeImages;
        return $this;
    }
    
    /**
     * Gets outputPageWidth
     * @return int
     */
    public function getOutputPageWidth()
    {
        return $this->outputPageWidth;
    }
  
    /**
     * Sets outputPageWidth
     * @param int $outputPageWidth Default value: 1024
     * @return $this
     */
    public function setOutputPageWidth($outputPageWidth)
    {
        
        $this->outputPageWidth = $outputPageWidth;
        return $this;
    }
    
    /**
     * Gets highPrecisionTextPositioning
     * @return bool
     */
    public function getHighPrecisionTextPositioning()
    {
        return $this->highPrecisionTextPositioning;
    }
  
    /**
     * Sets highPrecisionTextPositioning
     * @param bool $highPrecisionTextPositioning Default value: True
     * @return $this
     */
    public function setHighPrecisionTextPositioning($highPrecisionTextPositioning)
    {
        
        $this->highPrecisionTextPositioning = $highPrecisionTextPositioning;
        return $this;
    }
    
    /**
     * Gets addFontStyleHTMLTagsToText
     * @return bool
     */
    public function getAddFontStyleHTMLTagsToText()
    {
        return $this->addFontStyleHTMLTagsToText;
    }
  
    /**
     * Sets addFontStyleHTMLTagsToText
     * @param bool $addFontStyleHTMLTagsToText Default value: True
     * @return $this
     */
    public function setAddFontStyleHTMLTagsToText($addFontStyleHTMLTagsToText)
    {
        
        $this->addFontStyleHTMLTagsToText = $addFontStyleHTMLTagsToText;
        return $this;
    }
    
    /**
     * Gets controlsAsText
     * @return bool
     */
    public function getControlsAsText()
    {
        return $this->controlsAsText;
    }
  
    /**
     * Sets controlsAsText
     * @param bool $controlsAsText Default value: False
     * @return $this
     */
    public function setControlsAsText($controlsAsText)
    {
        
        $this->controlsAsText = $controlsAsText;
        return $this;
    }
    
    /**
     * Gets detectHyperLinks
     * @return bool
     */
    public function getDetectHyperLinks()
    {
        return $this->detectHyperLinks;
    }
  
    /**
     * Sets detectHyperLinks
     * @param bool $detectHyperLinks Default value: True
     * @return $this
     */
    public function setDetectHyperLinks($detectHyperLinks)
    {
        
        $this->detectHyperLinks = $detectHyperLinks;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password Default value: null
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets checkPermissions
     * @return bool
     */
    public function getCheckPermissions()
    {
        return $this->checkPermissions;
    }
  
    /**
     * Sets checkPermissions
     * @param bool $checkPermissions Default value: True
     * @return $this
     */
    public function setCheckPermissions($checkPermissions)
    {
        
        $this->checkPermissions = $checkPermissions;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
