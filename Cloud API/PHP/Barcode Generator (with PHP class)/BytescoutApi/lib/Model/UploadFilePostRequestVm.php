<?php
/**
 * UploadFilePostRequestVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * UploadFilePostRequestVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UploadFilePostRequestVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'input' => 'string',
        'inputType' => 'string',
        'storageTime' => 'int',
        'file' => '\Bytescout\Client\Model\FileUploadVm'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'input' => 'input',
        'inputType' => 'inputType',
        'storageTime' => 'storageTime',
        'file' => 'file'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'input' => 'setInput',
        'inputType' => 'setInputType',
        'storageTime' => 'setStorageTime',
        'file' => 'setFile'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'input' => 'getInput',
        'inputType' => 'getInputType',
        'storageTime' => 'getStorageTime',
        'file' => 'getFile'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $input Input Data
      * @var string
      */
    protected $input;
    
    /**
      * $inputType Type of Input Data
      * @var string
      */
    protected $inputType;
    
    /**
      * $storageTime Time of storing of a file on server (seconds).\r\n            Default value: 1800
      * @var int
      */
    protected $storageTime;
    
    /**
      * $file 
      * @var \Bytescout\Client\Model\FileUploadVm
      */
    protected $file;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->input = $data["input"];
            $this->inputType = $data["inputType"];
            $this->storageTime = $data["storageTime"];
            $this->file = $data["file"];
        }
    }
    
    /**
     * Gets input
     * @return string
     */
    public function getInput()
    {
        return $this->input;
    }
  
    /**
     * Sets input
     * @param string $input Input Data
     * @return $this
     */
    public function setInput($input)
    {
        
        $this->input = $input;
        return $this;
    }
    
    /**
     * Gets inputType
     * @return string
     */
    public function getInputType()
    {
        return $this->inputType;
    }
  
    /**
     * Sets inputType
     * @param string $inputType Type of Input Data
     * @return $this
     */
    public function setInputType($inputType)
    {
        $allowed_values = array("auto", "value", "valueBase64", "link", "fileID");
        if (!in_array($inputType, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'inputType', must be one of 'auto', 'value', 'valueBase64', 'link', 'fileID'");
        }
        $this->inputType = $inputType;
        return $this;
    }
    
    /**
     * Gets storageTime
     * @return int
     */
    public function getStorageTime()
    {
        return $this->storageTime;
    }
  
    /**
     * Sets storageTime
     * @param int $storageTime Time of storing of a file on server (seconds).\r\n            Default value: 1800
     * @return $this
     */
    public function setStorageTime($storageTime)
    {
        
        $this->storageTime = $storageTime;
        return $this;
    }
    
    /**
     * Gets file
     * @return \Bytescout\Client\Model\FileUploadVm
     */
    public function getFile()
    {
        return $this->file;
    }
  
    /**
     * Sets file
     * @param \Bytescout\Client\Model\FileUploadVm $file 
     * @return $this
     */
    public function setFile($file)
    {
        
        $this->file = $file;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
