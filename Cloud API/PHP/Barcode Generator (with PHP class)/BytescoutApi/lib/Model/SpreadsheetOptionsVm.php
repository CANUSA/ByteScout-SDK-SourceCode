<?php
/**
 * SpreadsheetOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * SpreadsheetOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SpreadsheetOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'userName' => 'string',
        'convertType' => 'string',
        'createNavigationLinks' => 'bool',
        'sheetIndex' => 'int',
        'delimiter' => 'string',
        'quoteSymbol' => 'string',
        'autoSize' => 'bool',
        'password' => 'string',
        'encoding' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'userName' => 'userName',
        'convertType' => 'convertType',
        'createNavigationLinks' => 'createNavigationLinks',
        'sheetIndex' => 'sheetIndex',
        'delimiter' => 'delimiter',
        'quoteSymbol' => 'quoteSymbol',
        'autoSize' => 'autoSize',
        'password' => 'password',
        'encoding' => 'encoding'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'userName' => 'setUserName',
        'convertType' => 'setConvertType',
        'createNavigationLinks' => 'setCreateNavigationLinks',
        'sheetIndex' => 'setSheetIndex',
        'delimiter' => 'setDelimiter',
        'quoteSymbol' => 'setQuoteSymbol',
        'autoSize' => 'setAutoSize',
        'password' => 'setPassword',
        'encoding' => 'setEncoding'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'userName' => 'getUserName',
        'convertType' => 'getConvertType',
        'createNavigationLinks' => 'getCreateNavigationLinks',
        'sheetIndex' => 'getSheetIndex',
        'delimiter' => 'getDelimiter',
        'quoteSymbol' => 'getQuoteSymbol',
        'autoSize' => 'getAutoSize',
        'password' => 'getPassword',
        'encoding' => 'getEncoding'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $userName Username of Spreadsheet\r\n            Default value: \"Bytescout\"
      * @var string
      */
    protected $userName;
    
    /**
      * $convertType Save Spreadsheet as
      * @var string
      */
    protected $convertType;
    
    /**
      * $createNavigationLinks Create Navigation Links (for ConvertType = HTML).\r\n            Default value: false
      * @var bool
      */
    protected $createNavigationLinks;
    
    /**
      * $sheetIndex Index of Sheet in Spreadsheet (for ConvertType = CSV, TXT, XML, PDF).\r\n            Default: 0 (first sheet)
      * @var int
      */
    protected $sheetIndex;
    
    /**
      * $delimiter Dilimiter of items.\r\n            Default value: ,
      * @var string
      */
    protected $delimiter;
    
    /**
      * $quoteSymbol Quote of items.\r\n            Default value \"
      * @var string
      */
    protected $quoteSymbol;
    
    /**
      * $autoSize Autosize of PDF file (for ConvertType = PDF).\r\n            Default value: true
      * @var bool
      */
    protected $autoSize;
    
    /**
      * $password Password of Spreadsheet (for ConvertType = XLSX).
      * @var string
      */
    protected $password;
    
    /**
      * $encoding Encoding of XML file (for ConvertType = CSV, XML).\r\n            Default value: Unicode
      * @var string
      */
    protected $encoding;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->userName = $data["userName"];
            $this->convertType = $data["convertType"];
            $this->createNavigationLinks = $data["createNavigationLinks"];
            $this->sheetIndex = $data["sheetIndex"];
            $this->delimiter = $data["delimiter"];
            $this->quoteSymbol = $data["quoteSymbol"];
            $this->autoSize = $data["autoSize"];
            $this->password = $data["password"];
            $this->encoding = $data["encoding"];
        }
    }
    
    /**
     * Gets userName
     * @return string
     */
    public function getUserName()
    {
        return $this->userName;
    }
  
    /**
     * Sets userName
     * @param string $userName Username of Spreadsheet\r\n            Default value: \"Bytescout\"
     * @return $this
     */
    public function setUserName($userName)
    {
        
        $this->userName = $userName;
        return $this;
    }
    
    /**
     * Gets convertType
     * @return string
     */
    public function getConvertType()
    {
        return $this->convertType;
    }
  
    /**
     * Sets convertType
     * @param string $convertType Save Spreadsheet as
     * @return $this
     */
    public function setConvertType($convertType)
    {
        $allowed_values = array("csv", "html", "txt", "xls", "xlsx", "xml", "pdf");
        if (!in_array($convertType, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'convertType', must be one of 'csv', 'html', 'txt', 'xls', 'xlsx', 'xml', 'pdf'");
        }
        $this->convertType = $convertType;
        return $this;
    }
    
    /**
     * Gets createNavigationLinks
     * @return bool
     */
    public function getCreateNavigationLinks()
    {
        return $this->createNavigationLinks;
    }
  
    /**
     * Sets createNavigationLinks
     * @param bool $createNavigationLinks Create Navigation Links (for ConvertType = HTML).\r\n            Default value: false
     * @return $this
     */
    public function setCreateNavigationLinks($createNavigationLinks)
    {
        
        $this->createNavigationLinks = $createNavigationLinks;
        return $this;
    }
    
    /**
     * Gets sheetIndex
     * @return int
     */
    public function getSheetIndex()
    {
        return $this->sheetIndex;
    }
  
    /**
     * Sets sheetIndex
     * @param int $sheetIndex Index of Sheet in Spreadsheet (for ConvertType = CSV, TXT, XML, PDF).\r\n            Default: 0 (first sheet)
     * @return $this
     */
    public function setSheetIndex($sheetIndex)
    {
        
        $this->sheetIndex = $sheetIndex;
        return $this;
    }
    
    /**
     * Gets delimiter
     * @return string
     */
    public function getDelimiter()
    {
        return $this->delimiter;
    }
  
    /**
     * Sets delimiter
     * @param string $delimiter Dilimiter of items.\r\n            Default value: ,
     * @return $this
     */
    public function setDelimiter($delimiter)
    {
        
        $this->delimiter = $delimiter;
        return $this;
    }
    
    /**
     * Gets quoteSymbol
     * @return string
     */
    public function getQuoteSymbol()
    {
        return $this->quoteSymbol;
    }
  
    /**
     * Sets quoteSymbol
     * @param string $quoteSymbol Quote of items.\r\n            Default value \"
     * @return $this
     */
    public function setQuoteSymbol($quoteSymbol)
    {
        
        $this->quoteSymbol = $quoteSymbol;
        return $this;
    }
    
    /**
     * Gets autoSize
     * @return bool
     */
    public function getAutoSize()
    {
        return $this->autoSize;
    }
  
    /**
     * Sets autoSize
     * @param bool $autoSize Autosize of PDF file (for ConvertType = PDF).\r\n            Default value: true
     * @return $this
     */
    public function setAutoSize($autoSize)
    {
        
        $this->autoSize = $autoSize;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password Password of Spreadsheet (for ConvertType = XLSX).
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets encoding
     * @return string
     */
    public function getEncoding()
    {
        return $this->encoding;
    }
  
    /**
     * Sets encoding
     * @param string $encoding Encoding of XML file (for ConvertType = CSV, XML).\r\n            Default value: Unicode
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $allowed_values = array("ascii", "default", "unicode", "bigEndianUnicode", "utf7", "utf8", "utf32");
        if (!in_array($encoding, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'encoding', must be one of 'ascii', 'default', 'unicode', 'bigEndianUnicode', 'utf7', 'utf8', 'utf32'");
        }
        $this->encoding = $encoding;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
