<?php
/**
 * PdfRasterRendererOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * PdfRasterRendererOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PdfRasterRendererOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'startPageIndex' => 'int',
        'endPageIndex' => 'int',
        'tiffCompression' => 'string',
        'pageIndex' => 'int',
        'resolution' => 'float',
        'useEmbeddedFonts' => 'bool',
        'textLayerEnabled' => 'bool',
        'vectorLayerEnabled' => 'bool',
        'imageLayerEnabled' => 'bool',
        'supportJBIGDecoding' => 'bool',
        'jpegQuality' => 'int',
        'password' => 'string',
        'textSmoothingMode' => 'string',
        'vectorSmoothingMode' => 'string',
        'imageInterpolationMode' => 'string',
        'rasterOutputFormat' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'startPageIndex' => 'startPageIndex',
        'endPageIndex' => 'endPageIndex',
        'tiffCompression' => 'tiffCompression',
        'pageIndex' => 'pageIndex',
        'resolution' => 'resolution',
        'useEmbeddedFonts' => 'useEmbeddedFonts',
        'textLayerEnabled' => 'textLayerEnabled',
        'vectorLayerEnabled' => 'vectorLayerEnabled',
        'imageLayerEnabled' => 'imageLayerEnabled',
        'supportJBIGDecoding' => 'supportJBIGDecoding',
        'jpegQuality' => 'jpegQuality',
        'password' => 'password',
        'textSmoothingMode' => 'textSmoothingMode',
        'vectorSmoothingMode' => 'vectorSmoothingMode',
        'imageInterpolationMode' => 'imageInterpolationMode',
        'rasterOutputFormat' => 'rasterOutputFormat'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'startPageIndex' => 'setStartPageIndex',
        'endPageIndex' => 'setEndPageIndex',
        'tiffCompression' => 'setTiffCompression',
        'pageIndex' => 'setPageIndex',
        'resolution' => 'setResolution',
        'useEmbeddedFonts' => 'setUseEmbeddedFonts',
        'textLayerEnabled' => 'setTextLayerEnabled',
        'vectorLayerEnabled' => 'setVectorLayerEnabled',
        'imageLayerEnabled' => 'setImageLayerEnabled',
        'supportJBIGDecoding' => 'setSupportJBIGDecoding',
        'jpegQuality' => 'setJpegQuality',
        'password' => 'setPassword',
        'textSmoothingMode' => 'setTextSmoothingMode',
        'vectorSmoothingMode' => 'setVectorSmoothingMode',
        'imageInterpolationMode' => 'setImageInterpolationMode',
        'rasterOutputFormat' => 'setRasterOutputFormat'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'startPageIndex' => 'getStartPageIndex',
        'endPageIndex' => 'getEndPageIndex',
        'tiffCompression' => 'getTiffCompression',
        'pageIndex' => 'getPageIndex',
        'resolution' => 'getResolution',
        'useEmbeddedFonts' => 'getUseEmbeddedFonts',
        'textLayerEnabled' => 'getTextLayerEnabled',
        'vectorLayerEnabled' => 'getVectorLayerEnabled',
        'imageLayerEnabled' => 'getImageLayerEnabled',
        'supportJBIGDecoding' => 'getSupportJBIGDecoding',
        'jpegQuality' => 'getJpegQuality',
        'password' => 'getPassword',
        'textSmoothingMode' => 'getTextSmoothingMode',
        'vectorSmoothingMode' => 'getVectorSmoothingMode',
        'imageInterpolationMode' => 'getImageInterpolationMode',
        'rasterOutputFormat' => 'getRasterOutputFormat'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $startPageIndex Index of a page (zero-based) from which images will be generated (for RasterOutputFormat is TIFF).
      * @var int
      */
    protected $startPageIndex;
    
    /**
      * $endPageIndex Index of a page (zero-based) on which generating of images will be finished (for RasterOutputFormat is TIFF).
      * @var int
      */
    protected $endPageIndex;
    
    /**
      * $tiffCompression Defines TIFF image compression. (for RasterOutputFormat is TIFF).\r\n            Default value: JPEG
      * @var string
      */
    protected $tiffCompression;
    
    /**
      * $pageIndex Index of a page (zero-based) from which image will be generated (for RasterOutputFormat is not TIFF).\r\n            Default value: 0 (first page)
      * @var int
      */
    protected $pageIndex;
    
    /**
      * $resolution Default value: 300
      * @var float
      */
    protected $resolution;
    
    /**
      * $useEmbeddedFonts Default value: True
      * @var bool
      */
    protected $useEmbeddedFonts;
    
    /**
      * $textLayerEnabled Default value: True
      * @var bool
      */
    protected $textLayerEnabled;
    
    /**
      * $vectorLayerEnabled Default value: True
      * @var bool
      */
    protected $vectorLayerEnabled;
    
    /**
      * $imageLayerEnabled Default value: True
      * @var bool
      */
    protected $imageLayerEnabled;
    
    /**
      * $supportJBIGDecoding Default value: True
      * @var bool
      */
    protected $supportJBIGDecoding;
    
    /**
      * $jpegQuality Default value: 80
      * @var int
      */
    protected $jpegQuality;
    
    /**
      * $password Default value: \"\"
      * @var string
      */
    protected $password;
    
    /**
      * $textSmoothingMode Default value: HighQuality
      * @var string
      */
    protected $textSmoothingMode;
    
    /**
      * $vectorSmoothingMode Default value: HighQuality
      * @var string
      */
    protected $vectorSmoothingMode;
    
    /**
      * $imageInterpolationMode Default value: HighQuality
      * @var string
      */
    protected $imageInterpolationMode;
    
    /**
      * $rasterOutputFormat File format in which page of PDF file will be generated.\r\n            Default value: PNG file
      * @var string
      */
    protected $rasterOutputFormat;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->startPageIndex = $data["startPageIndex"];
            $this->endPageIndex = $data["endPageIndex"];
            $this->tiffCompression = $data["tiffCompression"];
            $this->pageIndex = $data["pageIndex"];
            $this->resolution = $data["resolution"];
            $this->useEmbeddedFonts = $data["useEmbeddedFonts"];
            $this->textLayerEnabled = $data["textLayerEnabled"];
            $this->vectorLayerEnabled = $data["vectorLayerEnabled"];
            $this->imageLayerEnabled = $data["imageLayerEnabled"];
            $this->supportJBIGDecoding = $data["supportJBIGDecoding"];
            $this->jpegQuality = $data["jpegQuality"];
            $this->password = $data["password"];
            $this->textSmoothingMode = $data["textSmoothingMode"];
            $this->vectorSmoothingMode = $data["vectorSmoothingMode"];
            $this->imageInterpolationMode = $data["imageInterpolationMode"];
            $this->rasterOutputFormat = $data["rasterOutputFormat"];
        }
    }
    
    /**
     * Gets startPageIndex
     * @return int
     */
    public function getStartPageIndex()
    {
        return $this->startPageIndex;
    }
  
    /**
     * Sets startPageIndex
     * @param int $startPageIndex Index of a page (zero-based) from which images will be generated (for RasterOutputFormat is TIFF).
     * @return $this
     */
    public function setStartPageIndex($startPageIndex)
    {
        
        $this->startPageIndex = $startPageIndex;
        return $this;
    }
    
    /**
     * Gets endPageIndex
     * @return int
     */
    public function getEndPageIndex()
    {
        return $this->endPageIndex;
    }
  
    /**
     * Sets endPageIndex
     * @param int $endPageIndex Index of a page (zero-based) on which generating of images will be finished (for RasterOutputFormat is TIFF).
     * @return $this
     */
    public function setEndPageIndex($endPageIndex)
    {
        
        $this->endPageIndex = $endPageIndex;
        return $this;
    }
    
    /**
     * Gets tiffCompression
     * @return string
     */
    public function getTiffCompression()
    {
        return $this->tiffCompression;
    }
  
    /**
     * Sets tiffCompression
     * @param string $tiffCompression Defines TIFF image compression. (for RasterOutputFormat is TIFF).\r\n            Default value: JPEG
     * @return $this
     */
    public function setTiffCompression($tiffCompression)
    {
        $allowed_values = array("none", "lzw", "ccitt3", "ccitt4", "jpeg", "rle");
        if (!in_array($tiffCompression, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'tiffCompression', must be one of 'none', 'lzw', 'ccitt3', 'ccitt4', 'jpeg', 'rle'");
        }
        $this->tiffCompression = $tiffCompression;
        return $this;
    }
    
    /**
     * Gets pageIndex
     * @return int
     */
    public function getPageIndex()
    {
        return $this->pageIndex;
    }
  
    /**
     * Sets pageIndex
     * @param int $pageIndex Index of a page (zero-based) from which image will be generated (for RasterOutputFormat is not TIFF).\r\n            Default value: 0 (first page)
     * @return $this
     */
    public function setPageIndex($pageIndex)
    {
        
        $this->pageIndex = $pageIndex;
        return $this;
    }
    
    /**
     * Gets resolution
     * @return float
     */
    public function getResolution()
    {
        return $this->resolution;
    }
  
    /**
     * Sets resolution
     * @param float $resolution Default value: 300
     * @return $this
     */
    public function setResolution($resolution)
    {
        
        $this->resolution = $resolution;
        return $this;
    }
    
    /**
     * Gets useEmbeddedFonts
     * @return bool
     */
    public function getUseEmbeddedFonts()
    {
        return $this->useEmbeddedFonts;
    }
  
    /**
     * Sets useEmbeddedFonts
     * @param bool $useEmbeddedFonts Default value: True
     * @return $this
     */
    public function setUseEmbeddedFonts($useEmbeddedFonts)
    {
        
        $this->useEmbeddedFonts = $useEmbeddedFonts;
        return $this;
    }
    
    /**
     * Gets textLayerEnabled
     * @return bool
     */
    public function getTextLayerEnabled()
    {
        return $this->textLayerEnabled;
    }
  
    /**
     * Sets textLayerEnabled
     * @param bool $textLayerEnabled Default value: True
     * @return $this
     */
    public function setTextLayerEnabled($textLayerEnabled)
    {
        
        $this->textLayerEnabled = $textLayerEnabled;
        return $this;
    }
    
    /**
     * Gets vectorLayerEnabled
     * @return bool
     */
    public function getVectorLayerEnabled()
    {
        return $this->vectorLayerEnabled;
    }
  
    /**
     * Sets vectorLayerEnabled
     * @param bool $vectorLayerEnabled Default value: True
     * @return $this
     */
    public function setVectorLayerEnabled($vectorLayerEnabled)
    {
        
        $this->vectorLayerEnabled = $vectorLayerEnabled;
        return $this;
    }
    
    /**
     * Gets imageLayerEnabled
     * @return bool
     */
    public function getImageLayerEnabled()
    {
        return $this->imageLayerEnabled;
    }
  
    /**
     * Sets imageLayerEnabled
     * @param bool $imageLayerEnabled Default value: True
     * @return $this
     */
    public function setImageLayerEnabled($imageLayerEnabled)
    {
        
        $this->imageLayerEnabled = $imageLayerEnabled;
        return $this;
    }
    
    /**
     * Gets supportJBIGDecoding
     * @return bool
     */
    public function getSupportJBIGDecoding()
    {
        return $this->supportJBIGDecoding;
    }
  
    /**
     * Sets supportJBIGDecoding
     * @param bool $supportJBIGDecoding Default value: True
     * @return $this
     */
    public function setSupportJBIGDecoding($supportJBIGDecoding)
    {
        
        $this->supportJBIGDecoding = $supportJBIGDecoding;
        return $this;
    }
    
    /**
     * Gets jpegQuality
     * @return int
     */
    public function getJpegQuality()
    {
        return $this->jpegQuality;
    }
  
    /**
     * Sets jpegQuality
     * @param int $jpegQuality Default value: 80
     * @return $this
     */
    public function setJpegQuality($jpegQuality)
    {
        
        $this->jpegQuality = $jpegQuality;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password Default value: \"\"
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets textSmoothingMode
     * @return string
     */
    public function getTextSmoothingMode()
    {
        return $this->textSmoothingMode;
    }
  
    /**
     * Sets textSmoothingMode
     * @param string $textSmoothingMode Default value: HighQuality
     * @return $this
     */
    public function setTextSmoothingMode($textSmoothingMode)
    {
        $allowed_values = array("highSpeed", "highQuality");
        if (!in_array($textSmoothingMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'textSmoothingMode', must be one of 'highSpeed', 'highQuality'");
        }
        $this->textSmoothingMode = $textSmoothingMode;
        return $this;
    }
    
    /**
     * Gets vectorSmoothingMode
     * @return string
     */
    public function getVectorSmoothingMode()
    {
        return $this->vectorSmoothingMode;
    }
  
    /**
     * Sets vectorSmoothingMode
     * @param string $vectorSmoothingMode Default value: HighQuality
     * @return $this
     */
    public function setVectorSmoothingMode($vectorSmoothingMode)
    {
        $allowed_values = array("highSpeed", "highQuality");
        if (!in_array($vectorSmoothingMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'vectorSmoothingMode', must be one of 'highSpeed', 'highQuality'");
        }
        $this->vectorSmoothingMode = $vectorSmoothingMode;
        return $this;
    }
    
    /**
     * Gets imageInterpolationMode
     * @return string
     */
    public function getImageInterpolationMode()
    {
        return $this->imageInterpolationMode;
    }
  
    /**
     * Sets imageInterpolationMode
     * @param string $imageInterpolationMode Default value: HighQuality
     * @return $this
     */
    public function setImageInterpolationMode($imageInterpolationMode)
    {
        $allowed_values = array("highSpeed", "highQuality");
        if (!in_array($imageInterpolationMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'imageInterpolationMode', must be one of 'highSpeed', 'highQuality'");
        }
        $this->imageInterpolationMode = $imageInterpolationMode;
        return $this;
    }
    
    /**
     * Gets rasterOutputFormat
     * @return string
     */
    public function getRasterOutputFormat()
    {
        return $this->rasterOutputFormat;
    }
  
    /**
     * Sets rasterOutputFormat
     * @param string $rasterOutputFormat File format in which page of PDF file will be generated.\r\n            Default value: PNG file
     * @return $this
     */
    public function setRasterOutputFormat($rasterOutputFormat)
    {
        $allowed_values = array("bmp", "jpeg", "png", "tiff", "gif");
        if (!in_array($rasterOutputFormat, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'rasterOutputFormat', must be one of 'bmp', 'jpeg', 'png', 'tiff', 'gif'");
        }
        $this->rasterOutputFormat = $rasterOutputFormat;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
