<?php
/**
 * BarcodeReaderOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * BarcodeReaderOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BarcodeReaderOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'startPageIndex' => 'int',
        'endPageIndex' => 'int',
        'customArea' => '\Bytescout\Client\Model\RectangleVm',
        'customAreaLeft' => 'int',
        'customAreaTop' => 'int',
        'customAreaWidth' => 'int',
        'customAreaHeight' => 'int',
        'scanArea' => 'string',
        'barcodeTypesToFind' => '\Bytescout\Client\Model\BarcodeTypeSelector',
        'orientation' => 'string',
        'searchNegative' => 'bool',
        'requireQuietZones' => 'bool',
        'maxNumberOfBarcodesPerPage' => 'int',
        'decodingTimeOut' => 'int',
        'lastDecodingTimeOutExceeded' => 'bool',
        'maxNumberOfBarcodesPerDocument' => 'int',
        'allowOrphanedSupplementals' => 'bool',
        'minimalDataLength' => 'int',
        'mediumTrustLevelCompatible' => 'bool',
        'optimizedProcessingOfLargeImages' => 'bool',
        'optimizedProcessingOfLargeImagesSizeLimit' => 'int',
        'removeNoize' => 'bool',
        'noiseRemovalFilterSize' => 'int',
        'noiseRemovalFilterType' => 'string',
        'colorConversionMode' => 'string',
        'contrast' => 'int',
        'textEncoding' => 'string',
        'textEncodingCodePage' => 'int',
        'textEncodingUseUTF8' => 'bool',
        'pdfReadingMode' => 'string',
        'pdfRenderingResolution' => 'int',
        'pdfRenderText' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'startPageIndex' => 'startPageIndex',
        'endPageIndex' => 'endPageIndex',
        'customArea' => 'customArea',
        'customAreaLeft' => 'customAreaLeft',
        'customAreaTop' => 'customAreaTop',
        'customAreaWidth' => 'customAreaWidth',
        'customAreaHeight' => 'customAreaHeight',
        'scanArea' => 'scanArea',
        'barcodeTypesToFind' => 'barcodeTypesToFind',
        'orientation' => 'orientation',
        'searchNegative' => 'searchNegative',
        'requireQuietZones' => 'requireQuietZones',
        'maxNumberOfBarcodesPerPage' => 'maxNumberOfBarcodesPerPage',
        'decodingTimeOut' => 'decodingTimeOut',
        'lastDecodingTimeOutExceeded' => 'lastDecodingTimeOutExceeded',
        'maxNumberOfBarcodesPerDocument' => 'maxNumberOfBarcodesPerDocument',
        'allowOrphanedSupplementals' => 'allowOrphanedSupplementals',
        'minimalDataLength' => 'minimalDataLength',
        'mediumTrustLevelCompatible' => 'mediumTrustLevelCompatible',
        'optimizedProcessingOfLargeImages' => 'optimizedProcessingOfLargeImages',
        'optimizedProcessingOfLargeImagesSizeLimit' => 'optimizedProcessingOfLargeImagesSizeLimit',
        'removeNoize' => 'removeNoize',
        'noiseRemovalFilterSize' => 'noiseRemovalFilterSize',
        'noiseRemovalFilterType' => 'noiseRemovalFilterType',
        'colorConversionMode' => 'colorConversionMode',
        'contrast' => 'contrast',
        'textEncoding' => 'textEncoding',
        'textEncodingCodePage' => 'textEncodingCodePage',
        'textEncodingUseUTF8' => 'textEncodingUseUTF8',
        'pdfReadingMode' => 'pdfReadingMode',
        'pdfRenderingResolution' => 'pdfRenderingResolution',
        'pdfRenderText' => 'pdfRenderText'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'startPageIndex' => 'setStartPageIndex',
        'endPageIndex' => 'setEndPageIndex',
        'customArea' => 'setCustomArea',
        'customAreaLeft' => 'setCustomAreaLeft',
        'customAreaTop' => 'setCustomAreaTop',
        'customAreaWidth' => 'setCustomAreaWidth',
        'customAreaHeight' => 'setCustomAreaHeight',
        'scanArea' => 'setScanArea',
        'barcodeTypesToFind' => 'setBarcodeTypesToFind',
        'orientation' => 'setOrientation',
        'searchNegative' => 'setSearchNegative',
        'requireQuietZones' => 'setRequireQuietZones',
        'maxNumberOfBarcodesPerPage' => 'setMaxNumberOfBarcodesPerPage',
        'decodingTimeOut' => 'setDecodingTimeOut',
        'lastDecodingTimeOutExceeded' => 'setLastDecodingTimeOutExceeded',
        'maxNumberOfBarcodesPerDocument' => 'setMaxNumberOfBarcodesPerDocument',
        'allowOrphanedSupplementals' => 'setAllowOrphanedSupplementals',
        'minimalDataLength' => 'setMinimalDataLength',
        'mediumTrustLevelCompatible' => 'setMediumTrustLevelCompatible',
        'optimizedProcessingOfLargeImages' => 'setOptimizedProcessingOfLargeImages',
        'optimizedProcessingOfLargeImagesSizeLimit' => 'setOptimizedProcessingOfLargeImagesSizeLimit',
        'removeNoize' => 'setRemoveNoize',
        'noiseRemovalFilterSize' => 'setNoiseRemovalFilterSize',
        'noiseRemovalFilterType' => 'setNoiseRemovalFilterType',
        'colorConversionMode' => 'setColorConversionMode',
        'contrast' => 'setContrast',
        'textEncoding' => 'setTextEncoding',
        'textEncodingCodePage' => 'setTextEncodingCodePage',
        'textEncodingUseUTF8' => 'setTextEncodingUseUTF8',
        'pdfReadingMode' => 'setPdfReadingMode',
        'pdfRenderingResolution' => 'setPdfRenderingResolution',
        'pdfRenderText' => 'setPdfRenderText'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'startPageIndex' => 'getStartPageIndex',
        'endPageIndex' => 'getEndPageIndex',
        'customArea' => 'getCustomArea',
        'customAreaLeft' => 'getCustomAreaLeft',
        'customAreaTop' => 'getCustomAreaTop',
        'customAreaWidth' => 'getCustomAreaWidth',
        'customAreaHeight' => 'getCustomAreaHeight',
        'scanArea' => 'getScanArea',
        'barcodeTypesToFind' => 'getBarcodeTypesToFind',
        'orientation' => 'getOrientation',
        'searchNegative' => 'getSearchNegative',
        'requireQuietZones' => 'getRequireQuietZones',
        'maxNumberOfBarcodesPerPage' => 'getMaxNumberOfBarcodesPerPage',
        'decodingTimeOut' => 'getDecodingTimeOut',
        'lastDecodingTimeOutExceeded' => 'getLastDecodingTimeOutExceeded',
        'maxNumberOfBarcodesPerDocument' => 'getMaxNumberOfBarcodesPerDocument',
        'allowOrphanedSupplementals' => 'getAllowOrphanedSupplementals',
        'minimalDataLength' => 'getMinimalDataLength',
        'mediumTrustLevelCompatible' => 'getMediumTrustLevelCompatible',
        'optimizedProcessingOfLargeImages' => 'getOptimizedProcessingOfLargeImages',
        'optimizedProcessingOfLargeImagesSizeLimit' => 'getOptimizedProcessingOfLargeImagesSizeLimit',
        'removeNoize' => 'getRemoveNoize',
        'noiseRemovalFilterSize' => 'getNoiseRemovalFilterSize',
        'noiseRemovalFilterType' => 'getNoiseRemovalFilterType',
        'colorConversionMode' => 'getColorConversionMode',
        'contrast' => 'getContrast',
        'textEncoding' => 'getTextEncoding',
        'textEncodingCodePage' => 'getTextEncodingCodePage',
        'textEncodingUseUTF8' => 'getTextEncodingUseUTF8',
        'pdfReadingMode' => 'getPdfReadingMode',
        'pdfRenderingResolution' => 'getPdfRenderingResolution',
        'pdfRenderText' => 'getPdfRenderText'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $startPageIndex Index of a page (zero-based) from which searching of BarCodes will be started (for PDF files).\r\n            Default value: all pages
      * @var int
      */
    protected $startPageIndex;
    
    /**
      * $endPageIndex Index of a page (zero-based) on which searching of BarCodes will be finished (for PDF files).\r\n            Default value: all pages
      * @var int
      */
    protected $endPageIndex;
    
    /**
      * $customArea Default value: {X=0,Y=0,Width=0,Height=0}
      * @var \Bytescout\Client\Model\RectangleVm
      */
    protected $customArea;
    
    /**
      * $customAreaLeft Default value: 0
      * @var int
      */
    protected $customAreaLeft;
    
    /**
      * $customAreaTop Default value: 0
      * @var int
      */
    protected $customAreaTop;
    
    /**
      * $customAreaWidth Default value: 0
      * @var int
      */
    protected $customAreaWidth;
    
    /**
      * $customAreaHeight Default value: 0
      * @var int
      */
    protected $customAreaHeight;
    
    /**
      * $scanArea Default value: WholePage
      * @var string
      */
    protected $scanArea;
    
    /**
      * $barcodeTypesToFind Default value: All = true
      * @var \Bytescout\Client\Model\BarcodeTypeSelector
      */
    protected $barcodeTypesToFind;
    
    /**
      * $orientation Default value: Default
      * @var string
      */
    protected $orientation;
    
    /**
      * $searchNegative Default value: False
      * @var bool
      */
    protected $searchNegative;
    
    /**
      * $requireQuietZones Default value: True
      * @var bool
      */
    protected $requireQuietZones;
    
    /**
      * $maxNumberOfBarcodesPerPage Default value: 0
      * @var int
      */
    protected $maxNumberOfBarcodesPerPage;
    
    /**
      * $decodingTimeOut Default value: 10000 (10 seconds)
      * @var int
      */
    protected $decodingTimeOut;
    
    /**
      * $lastDecodingTimeOutExceeded Default value: False
      * @var bool
      */
    protected $lastDecodingTimeOutExceeded;
    
    /**
      * $maxNumberOfBarcodesPerDocument Default value: 0
      * @var int
      */
    protected $maxNumberOfBarcodesPerDocument;
    
    /**
      * $allowOrphanedSupplementals Default value: False
      * @var bool
      */
    protected $allowOrphanedSupplementals;
    
    /**
      * $minimalDataLength Default value: 0
      * @var int
      */
    protected $minimalDataLength;
    
    /**
      * $mediumTrustLevelCompatible Default value: False
      * @var bool
      */
    protected $mediumTrustLevelCompatible;
    
    /**
      * $optimizedProcessingOfLargeImages Default value: False
      * @var bool
      */
    protected $optimizedProcessingOfLargeImages;
    
    /**
      * $optimizedProcessingOfLargeImagesSizeLimit Default value: 1600
      * @var int
      */
    protected $optimizedProcessingOfLargeImagesSizeLimit;
    
    /**
      * $removeNoize Default value: False
      * @var bool
      */
    protected $removeNoize;
    
    /**
      * $noiseRemovalFilterSize Default value: 2
      * @var int
      */
    protected $noiseRemovalFilterSize;
    
    /**
      * $noiseRemovalFilterType Default value: Blur
      * @var string
      */
    protected $noiseRemovalFilterType;
    
    /**
      * $colorConversionMode Default value: ImageBlocks
      * @var string
      */
    protected $colorConversionMode;
    
    /**
      * $contrast Default value: 0
      * @var int
      */
    protected $contrast;
    
    /**
      * $textEncoding Default value: Default
      * @var string
      */
    protected $textEncoding;
    
    /**
      * $textEncodingCodePage Default value: 28591
      * @var int
      */
    protected $textEncodingCodePage;
    
    /**
      * $textEncodingUseUTF8 Default value: False
      * @var bool
      */
    protected $textEncodingUseUTF8;
    
    /**
      * $pdfReadingMode Default value: RenderPDF
      * @var string
      */
    protected $pdfReadingMode;
    
    /**
      * $pdfRenderingResolution Default value: 300
      * @var int
      */
    protected $pdfRenderingResolution;
    
    /**
      * $pdfRenderText Default value: True
      * @var bool
      */
    protected $pdfRenderText;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->startPageIndex = $data["startPageIndex"];
            $this->endPageIndex = $data["endPageIndex"];
            $this->customArea = $data["customArea"];
            $this->customAreaLeft = $data["customAreaLeft"];
            $this->customAreaTop = $data["customAreaTop"];
            $this->customAreaWidth = $data["customAreaWidth"];
            $this->customAreaHeight = $data["customAreaHeight"];
            $this->scanArea = $data["scanArea"];
            $this->barcodeTypesToFind = $data["barcodeTypesToFind"];
            $this->orientation = $data["orientation"];
            $this->searchNegative = $data["searchNegative"];
            $this->requireQuietZones = $data["requireQuietZones"];
            $this->maxNumberOfBarcodesPerPage = $data["maxNumberOfBarcodesPerPage"];
            $this->decodingTimeOut = $data["decodingTimeOut"];
            $this->lastDecodingTimeOutExceeded = $data["lastDecodingTimeOutExceeded"];
            $this->maxNumberOfBarcodesPerDocument = $data["maxNumberOfBarcodesPerDocument"];
            $this->allowOrphanedSupplementals = $data["allowOrphanedSupplementals"];
            $this->minimalDataLength = $data["minimalDataLength"];
            $this->mediumTrustLevelCompatible = $data["mediumTrustLevelCompatible"];
            $this->optimizedProcessingOfLargeImages = $data["optimizedProcessingOfLargeImages"];
            $this->optimizedProcessingOfLargeImagesSizeLimit = $data["optimizedProcessingOfLargeImagesSizeLimit"];
            $this->removeNoize = $data["removeNoize"];
            $this->noiseRemovalFilterSize = $data["noiseRemovalFilterSize"];
            $this->noiseRemovalFilterType = $data["noiseRemovalFilterType"];
            $this->colorConversionMode = $data["colorConversionMode"];
            $this->contrast = $data["contrast"];
            $this->textEncoding = $data["textEncoding"];
            $this->textEncodingCodePage = $data["textEncodingCodePage"];
            $this->textEncodingUseUTF8 = $data["textEncodingUseUTF8"];
            $this->pdfReadingMode = $data["pdfReadingMode"];
            $this->pdfRenderingResolution = $data["pdfRenderingResolution"];
            $this->pdfRenderText = $data["pdfRenderText"];
        }
    }
    
    /**
     * Gets startPageIndex
     * @return int
     */
    public function getStartPageIndex()
    {
        return $this->startPageIndex;
    }
  
    /**
     * Sets startPageIndex
     * @param int $startPageIndex Index of a page (zero-based) from which searching of BarCodes will be started (for PDF files).\r\n            Default value: all pages
     * @return $this
     */
    public function setStartPageIndex($startPageIndex)
    {
        
        $this->startPageIndex = $startPageIndex;
        return $this;
    }
    
    /**
     * Gets endPageIndex
     * @return int
     */
    public function getEndPageIndex()
    {
        return $this->endPageIndex;
    }
  
    /**
     * Sets endPageIndex
     * @param int $endPageIndex Index of a page (zero-based) on which searching of BarCodes will be finished (for PDF files).\r\n            Default value: all pages
     * @return $this
     */
    public function setEndPageIndex($endPageIndex)
    {
        
        $this->endPageIndex = $endPageIndex;
        return $this;
    }
    
    /**
     * Gets customArea
     * @return \Bytescout\Client\Model\RectangleVm
     */
    public function getCustomArea()
    {
        return $this->customArea;
    }
  
    /**
     * Sets customArea
     * @param \Bytescout\Client\Model\RectangleVm $customArea Default value: {X=0,Y=0,Width=0,Height=0}
     * @return $this
     */
    public function setCustomArea($customArea)
    {
        
        $this->customArea = $customArea;
        return $this;
    }
    
    /**
     * Gets customAreaLeft
     * @return int
     */
    public function getCustomAreaLeft()
    {
        return $this->customAreaLeft;
    }
  
    /**
     * Sets customAreaLeft
     * @param int $customAreaLeft Default value: 0
     * @return $this
     */
    public function setCustomAreaLeft($customAreaLeft)
    {
        
        $this->customAreaLeft = $customAreaLeft;
        return $this;
    }
    
    /**
     * Gets customAreaTop
     * @return int
     */
    public function getCustomAreaTop()
    {
        return $this->customAreaTop;
    }
  
    /**
     * Sets customAreaTop
     * @param int $customAreaTop Default value: 0
     * @return $this
     */
    public function setCustomAreaTop($customAreaTop)
    {
        
        $this->customAreaTop = $customAreaTop;
        return $this;
    }
    
    /**
     * Gets customAreaWidth
     * @return int
     */
    public function getCustomAreaWidth()
    {
        return $this->customAreaWidth;
    }
  
    /**
     * Sets customAreaWidth
     * @param int $customAreaWidth Default value: 0
     * @return $this
     */
    public function setCustomAreaWidth($customAreaWidth)
    {
        
        $this->customAreaWidth = $customAreaWidth;
        return $this;
    }
    
    /**
     * Gets customAreaHeight
     * @return int
     */
    public function getCustomAreaHeight()
    {
        return $this->customAreaHeight;
    }
  
    /**
     * Sets customAreaHeight
     * @param int $customAreaHeight Default value: 0
     * @return $this
     */
    public function setCustomAreaHeight($customAreaHeight)
    {
        
        $this->customAreaHeight = $customAreaHeight;
        return $this;
    }
    
    /**
     * Gets scanArea
     * @return string
     */
    public function getScanArea()
    {
        return $this->scanArea;
    }
  
    /**
     * Sets scanArea
     * @param string $scanArea Default value: WholePage
     * @return $this
     */
    public function setScanArea($scanArea)
    {
        $allowed_values = array("custom", "topLeftQuarter", "topRightQuarter", "topHalf", "bottomRightQuarter", "bottomLeftQuarter", "bottomHalf", "wholePage");
        if (!in_array($scanArea, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'scanArea', must be one of 'custom', 'topLeftQuarter', 'topRightQuarter', 'topHalf', 'bottomRightQuarter', 'bottomLeftQuarter', 'bottomHalf', 'wholePage'");
        }
        $this->scanArea = $scanArea;
        return $this;
    }
    
    /**
     * Gets barcodeTypesToFind
     * @return \Bytescout\Client\Model\BarcodeTypeSelector
     */
    public function getBarcodeTypesToFind()
    {
        return $this->barcodeTypesToFind;
    }
  
    /**
     * Sets barcodeTypesToFind
     * @param \Bytescout\Client\Model\BarcodeTypeSelector $barcodeTypesToFind Default value: All = true
     * @return $this
     */
    public function setBarcodeTypesToFind($barcodeTypesToFind)
    {
        
        $this->barcodeTypesToFind = $barcodeTypesToFind;
        return $this;
    }
    
    /**
     * Gets orientation
     * @return string
     */
    public function getOrientation()
    {
        return $this->orientation;
    }
  
    /**
     * Sets orientation
     * @param string $orientation Default value: Default
     * @return $this
     */
    public function setOrientation($orientation)
    {
        $allowed_values = array("horizontalFromLeftToRight", "default", "verticalFromTopToBottom", "diagonalFromTopLeftToBottomRight45", "diagonalFromBottomLeftToTopRight45", "horizontalFromRightToLeft", "diagonalFromTopLeftToBottomRight11", "diagonalFromBottomRightToTopLeft11", "diagonalFromBottomLeftToTopRight11", "diagonalFromTopRightToBottomLeft11", "diagonalFromTopLeftToBottomRight22", "diagonalFromBottomRightToTopLeft22", "diagonalFromBottomLeftToTopRight22", "diagonalFromTopRightToBottomLeft22", "diagonalFromBottomRightToTopLeft45", "diagonalFromTopRightToBottomLeft45", "verticalFromBottomToTop", "searchAll");
        if (!in_array($orientation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'orientation', must be one of 'horizontalFromLeftToRight', 'default', 'verticalFromTopToBottom', 'diagonalFromTopLeftToBottomRight45', 'diagonalFromBottomLeftToTopRight45', 'horizontalFromRightToLeft', 'diagonalFromTopLeftToBottomRight11', 'diagonalFromBottomRightToTopLeft11', 'diagonalFromBottomLeftToTopRight11', 'diagonalFromTopRightToBottomLeft11', 'diagonalFromTopLeftToBottomRight22', 'diagonalFromBottomRightToTopLeft22', 'diagonalFromBottomLeftToTopRight22', 'diagonalFromTopRightToBottomLeft22', 'diagonalFromBottomRightToTopLeft45', 'diagonalFromTopRightToBottomLeft45', 'verticalFromBottomToTop', 'searchAll'");
        }
        $this->orientation = $orientation;
        return $this;
    }
    
    /**
     * Gets searchNegative
     * @return bool
     */
    public function getSearchNegative()
    {
        return $this->searchNegative;
    }
  
    /**
     * Sets searchNegative
     * @param bool $searchNegative Default value: False
     * @return $this
     */
    public function setSearchNegative($searchNegative)
    {
        
        $this->searchNegative = $searchNegative;
        return $this;
    }
    
    /**
     * Gets requireQuietZones
     * @return bool
     */
    public function getRequireQuietZones()
    {
        return $this->requireQuietZones;
    }
  
    /**
     * Sets requireQuietZones
     * @param bool $requireQuietZones Default value: True
     * @return $this
     */
    public function setRequireQuietZones($requireQuietZones)
    {
        
        $this->requireQuietZones = $requireQuietZones;
        return $this;
    }
    
    /**
     * Gets maxNumberOfBarcodesPerPage
     * @return int
     */
    public function getMaxNumberOfBarcodesPerPage()
    {
        return $this->maxNumberOfBarcodesPerPage;
    }
  
    /**
     * Sets maxNumberOfBarcodesPerPage
     * @param int $maxNumberOfBarcodesPerPage Default value: 0
     * @return $this
     */
    public function setMaxNumberOfBarcodesPerPage($maxNumberOfBarcodesPerPage)
    {
        
        $this->maxNumberOfBarcodesPerPage = $maxNumberOfBarcodesPerPage;
        return $this;
    }
    
    /**
     * Gets decodingTimeOut
     * @return int
     */
    public function getDecodingTimeOut()
    {
        return $this->decodingTimeOut;
    }
  
    /**
     * Sets decodingTimeOut
     * @param int $decodingTimeOut Default value: 10000 (10 seconds)
     * @return $this
     */
    public function setDecodingTimeOut($decodingTimeOut)
    {
        
        $this->decodingTimeOut = $decodingTimeOut;
        return $this;
    }
    
    /**
     * Gets lastDecodingTimeOutExceeded
     * @return bool
     */
    public function getLastDecodingTimeOutExceeded()
    {
        return $this->lastDecodingTimeOutExceeded;
    }
  
    /**
     * Sets lastDecodingTimeOutExceeded
     * @param bool $lastDecodingTimeOutExceeded Default value: False
     * @return $this
     */
    public function setLastDecodingTimeOutExceeded($lastDecodingTimeOutExceeded)
    {
        
        $this->lastDecodingTimeOutExceeded = $lastDecodingTimeOutExceeded;
        return $this;
    }
    
    /**
     * Gets maxNumberOfBarcodesPerDocument
     * @return int
     */
    public function getMaxNumberOfBarcodesPerDocument()
    {
        return $this->maxNumberOfBarcodesPerDocument;
    }
  
    /**
     * Sets maxNumberOfBarcodesPerDocument
     * @param int $maxNumberOfBarcodesPerDocument Default value: 0
     * @return $this
     */
    public function setMaxNumberOfBarcodesPerDocument($maxNumberOfBarcodesPerDocument)
    {
        
        $this->maxNumberOfBarcodesPerDocument = $maxNumberOfBarcodesPerDocument;
        return $this;
    }
    
    /**
     * Gets allowOrphanedSupplementals
     * @return bool
     */
    public function getAllowOrphanedSupplementals()
    {
        return $this->allowOrphanedSupplementals;
    }
  
    /**
     * Sets allowOrphanedSupplementals
     * @param bool $allowOrphanedSupplementals Default value: False
     * @return $this
     */
    public function setAllowOrphanedSupplementals($allowOrphanedSupplementals)
    {
        
        $this->allowOrphanedSupplementals = $allowOrphanedSupplementals;
        return $this;
    }
    
    /**
     * Gets minimalDataLength
     * @return int
     */
    public function getMinimalDataLength()
    {
        return $this->minimalDataLength;
    }
  
    /**
     * Sets minimalDataLength
     * @param int $minimalDataLength Default value: 0
     * @return $this
     */
    public function setMinimalDataLength($minimalDataLength)
    {
        
        $this->minimalDataLength = $minimalDataLength;
        return $this;
    }
    
    /**
     * Gets mediumTrustLevelCompatible
     * @return bool
     */
    public function getMediumTrustLevelCompatible()
    {
        return $this->mediumTrustLevelCompatible;
    }
  
    /**
     * Sets mediumTrustLevelCompatible
     * @param bool $mediumTrustLevelCompatible Default value: False
     * @return $this
     */
    public function setMediumTrustLevelCompatible($mediumTrustLevelCompatible)
    {
        
        $this->mediumTrustLevelCompatible = $mediumTrustLevelCompatible;
        return $this;
    }
    
    /**
     * Gets optimizedProcessingOfLargeImages
     * @return bool
     */
    public function getOptimizedProcessingOfLargeImages()
    {
        return $this->optimizedProcessingOfLargeImages;
    }
  
    /**
     * Sets optimizedProcessingOfLargeImages
     * @param bool $optimizedProcessingOfLargeImages Default value: False
     * @return $this
     */
    public function setOptimizedProcessingOfLargeImages($optimizedProcessingOfLargeImages)
    {
        
        $this->optimizedProcessingOfLargeImages = $optimizedProcessingOfLargeImages;
        return $this;
    }
    
    /**
     * Gets optimizedProcessingOfLargeImagesSizeLimit
     * @return int
     */
    public function getOptimizedProcessingOfLargeImagesSizeLimit()
    {
        return $this->optimizedProcessingOfLargeImagesSizeLimit;
    }
  
    /**
     * Sets optimizedProcessingOfLargeImagesSizeLimit
     * @param int $optimizedProcessingOfLargeImagesSizeLimit Default value: 1600
     * @return $this
     */
    public function setOptimizedProcessingOfLargeImagesSizeLimit($optimizedProcessingOfLargeImagesSizeLimit)
    {
        
        $this->optimizedProcessingOfLargeImagesSizeLimit = $optimizedProcessingOfLargeImagesSizeLimit;
        return $this;
    }
    
    /**
     * Gets removeNoize
     * @return bool
     */
    public function getRemoveNoize()
    {
        return $this->removeNoize;
    }
  
    /**
     * Sets removeNoize
     * @param bool $removeNoize Default value: False
     * @return $this
     */
    public function setRemoveNoize($removeNoize)
    {
        
        $this->removeNoize = $removeNoize;
        return $this;
    }
    
    /**
     * Gets noiseRemovalFilterSize
     * @return int
     */
    public function getNoiseRemovalFilterSize()
    {
        return $this->noiseRemovalFilterSize;
    }
  
    /**
     * Sets noiseRemovalFilterSize
     * @param int $noiseRemovalFilterSize Default value: 2
     * @return $this
     */
    public function setNoiseRemovalFilterSize($noiseRemovalFilterSize)
    {
        
        $this->noiseRemovalFilterSize = $noiseRemovalFilterSize;
        return $this;
    }
    
    /**
     * Gets noiseRemovalFilterType
     * @return string
     */
    public function getNoiseRemovalFilterType()
    {
        return $this->noiseRemovalFilterType;
    }
  
    /**
     * Sets noiseRemovalFilterType
     * @param string $noiseRemovalFilterType Default value: Blur
     * @return $this
     */
    public function setNoiseRemovalFilterType($noiseRemovalFilterType)
    {
        $allowed_values = array("blur", "median");
        if (!in_array($noiseRemovalFilterType, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'noiseRemovalFilterType', must be one of 'blur', 'median'");
        }
        $this->noiseRemovalFilterType = $noiseRemovalFilterType;
        return $this;
    }
    
    /**
     * Gets colorConversionMode
     * @return string
     */
    public function getColorConversionMode()
    {
        return $this->colorConversionMode;
    }
  
    /**
     * Sets colorConversionMode
     * @param string $colorConversionMode Default value: ImageBlocks
     * @return $this
     */
    public function setColorConversionMode($colorConversionMode)
    {
        $allowed_values = array("imageBlocks", "image");
        if (!in_array($colorConversionMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'colorConversionMode', must be one of 'imageBlocks', 'image'");
        }
        $this->colorConversionMode = $colorConversionMode;
        return $this;
    }
    
    /**
     * Gets contrast
     * @return int
     */
    public function getContrast()
    {
        return $this->contrast;
    }
  
    /**
     * Sets contrast
     * @param int $contrast Default value: 0
     * @return $this
     */
    public function setContrast($contrast)
    {
        
        $this->contrast = $contrast;
        return $this;
    }
    
    /**
     * Gets textEncoding
     * @return string
     */
    public function getTextEncoding()
    {
        return $this->textEncoding;
    }
  
    /**
     * Sets textEncoding
     * @param string $textEncoding Default value: Default
     * @return $this
     */
    public function setTextEncoding($textEncoding)
    {
        $allowed_values = array("ascii", "default", "unicode", "bigEndianUnicode", "utf7", "utf8", "utf32");
        if (!in_array($textEncoding, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'textEncoding', must be one of 'ascii', 'default', 'unicode', 'bigEndianUnicode', 'utf7', 'utf8', 'utf32'");
        }
        $this->textEncoding = $textEncoding;
        return $this;
    }
    
    /**
     * Gets textEncodingCodePage
     * @return int
     */
    public function getTextEncodingCodePage()
    {
        return $this->textEncodingCodePage;
    }
  
    /**
     * Sets textEncodingCodePage
     * @param int $textEncodingCodePage Default value: 28591
     * @return $this
     */
    public function setTextEncodingCodePage($textEncodingCodePage)
    {
        
        $this->textEncodingCodePage = $textEncodingCodePage;
        return $this;
    }
    
    /**
     * Gets textEncodingUseUTF8
     * @return bool
     */
    public function getTextEncodingUseUTF8()
    {
        return $this->textEncodingUseUTF8;
    }
  
    /**
     * Sets textEncodingUseUTF8
     * @param bool $textEncodingUseUTF8 Default value: False
     * @return $this
     */
    public function setTextEncodingUseUTF8($textEncodingUseUTF8)
    {
        
        $this->textEncodingUseUTF8 = $textEncodingUseUTF8;
        return $this;
    }
    
    /**
     * Gets pdfReadingMode
     * @return string
     */
    public function getPdfReadingMode()
    {
        return $this->pdfReadingMode;
    }
  
    /**
     * Sets pdfReadingMode
     * @param string $pdfReadingMode Default value: RenderPDF
     * @return $this
     */
    public function setPdfReadingMode($pdfReadingMode)
    {
        $allowed_values = array("renderPDF", "extractEmbeddedImagesOnly");
        if (!in_array($pdfReadingMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'pdfReadingMode', must be one of 'renderPDF', 'extractEmbeddedImagesOnly'");
        }
        $this->pdfReadingMode = $pdfReadingMode;
        return $this;
    }
    
    /**
     * Gets pdfRenderingResolution
     * @return int
     */
    public function getPdfRenderingResolution()
    {
        return $this->pdfRenderingResolution;
    }
  
    /**
     * Sets pdfRenderingResolution
     * @param int $pdfRenderingResolution Default value: 300
     * @return $this
     */
    public function setPdfRenderingResolution($pdfRenderingResolution)
    {
        
        $this->pdfRenderingResolution = $pdfRenderingResolution;
        return $this;
    }
    
    /**
     * Gets pdfRenderText
     * @return bool
     */
    public function getPdfRenderText()
    {
        return $this->pdfRenderText;
    }
  
    /**
     * Sets pdfRenderText
     * @param bool $pdfRenderText Default value: True
     * @return $this
     */
    public function setPdfRenderText($pdfRenderText)
    {
        
        $this->pdfRenderText = $pdfRenderText;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
