<?php
/**
 * HTMLToPDFApi
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Api;

use \Bytescout\Client\Configuration;
use \Bytescout\Client\ApiClient;
use \Bytescout\Client\ApiException;
use \Bytescout\Client\ObjectSerializer;

/**
 * HTMLToPDFApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HTMLToPDFApi
{

    /**
     * API Client
     * @var \Bytescout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Bytescout\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bytescout.io');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Bytescout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Bytescout\Client\ApiClient $apiClient set the API client
     * @return HTMLToPDFApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * hTMLToPDFGetHtmlToPdf
     *
     * Convert HTML page to PDF document
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param string $propertiesTitle Title of a PDF file. (optional)
     * @param string $propertiesOrientation Orientation of pages of a PDF file.\r\n            Default value: Portrait (optional)
     * @param double $propertiesPageSizeWidth  (optional)
     * @param double $propertiesPageSizeHeight  (optional)
     * @param string $propertiesPageSizeUnit Default value: Millimeters (optional)
     * @param double $propertiesMarginsBottom  (optional)
     * @param double $propertiesMarginsLeft  (optional)
     * @param double $propertiesMarginsRight  (optional)
     * @param double $propertiesMarginsTop  (optional)
     * @param string $propertiesMarginsUnit Default value: Millimeters (optional)
     * @param bool $propertiesPrintBackground Define print background of a page or not.\r\n            Default value: true (optional)
     * @param string $propertiesHeaderHTML HTML code which will be inserted in header of pages.\r\n            Default value: null (optional)
     * @param string $propertiesFooterHTML HTML code which will be inserted in footer of pages.\r\n            Default value: null (optional)
     * @param string $propertiesTemplateData String of JSON data which will be used for generation PDF file from template (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function hTMLToPDFGetHtmlToPdf($apikey = null, $propertiesTitle = null, $propertiesOrientation = null, $propertiesPageSizeWidth = null, $propertiesPageSizeHeight = null, $propertiesPageSizeUnit = null, $propertiesMarginsBottom = null, $propertiesMarginsLeft = null, $propertiesMarginsRight = null, $propertiesMarginsTop = null, $propertiesMarginsUnit = null, $propertiesPrintBackground = null, $propertiesHeaderHTML = null, $propertiesFooterHTML = null, $propertiesTemplateData = null, $outputType = null, $input = null, $inputType = null)
    {
        list($response, $statusCode, $httpHeader) = $this->hTMLToPDFGetHtmlToPdfWithHttpInfo ($apikey, $propertiesTitle, $propertiesOrientation, $propertiesPageSizeWidth, $propertiesPageSizeHeight, $propertiesPageSizeUnit, $propertiesMarginsBottom, $propertiesMarginsLeft, $propertiesMarginsRight, $propertiesMarginsTop, $propertiesMarginsUnit, $propertiesPrintBackground, $propertiesHeaderHTML, $propertiesFooterHTML, $propertiesTemplateData, $outputType, $input, $inputType);
        return $response; 
    }


    /**
     * hTMLToPDFGetHtmlToPdfWithHttpInfo
     *
     * Convert HTML page to PDF document
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param string $propertiesTitle Title of a PDF file. (optional)
     * @param string $propertiesOrientation Orientation of pages of a PDF file.\r\n            Default value: Portrait (optional)
     * @param double $propertiesPageSizeWidth  (optional)
     * @param double $propertiesPageSizeHeight  (optional)
     * @param string $propertiesPageSizeUnit Default value: Millimeters (optional)
     * @param double $propertiesMarginsBottom  (optional)
     * @param double $propertiesMarginsLeft  (optional)
     * @param double $propertiesMarginsRight  (optional)
     * @param double $propertiesMarginsTop  (optional)
     * @param string $propertiesMarginsUnit Default value: Millimeters (optional)
     * @param bool $propertiesPrintBackground Define print background of a page or not.\r\n            Default value: true (optional)
     * @param string $propertiesHeaderHTML HTML code which will be inserted in header of pages.\r\n            Default value: null (optional)
     * @param string $propertiesFooterHTML HTML code which will be inserted in footer of pages.\r\n            Default value: null (optional)
     * @param string $propertiesTemplateData String of JSON data which will be used for generation PDF file from template (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function hTMLToPDFGetHtmlToPdfWithHttpInfo($apikey = null, $propertiesTitle = null, $propertiesOrientation = null, $propertiesPageSizeWidth = null, $propertiesPageSizeHeight = null, $propertiesPageSizeUnit = null, $propertiesMarginsBottom = null, $propertiesMarginsLeft = null, $propertiesMarginsRight = null, $propertiesMarginsTop = null, $propertiesMarginsUnit = null, $propertiesPrintBackground = null, $propertiesHeaderHTML = null, $propertiesFooterHTML = null, $propertiesTemplateData = null, $outputType = null, $input = null, $inputType = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/v1/htmltopdf/convert";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }// query params
        
        if ($propertiesTitle !== null) {
            $queryParams['properties.title'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTitle);
        }// query params
        
        if ($propertiesOrientation !== null) {
            $queryParams['properties.orientation'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOrientation);
        }// query params
        
        if ($propertiesPageSizeWidth !== null) {
            $queryParams['properties.pageSize.width'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPageSizeWidth);
        }// query params
        
        if ($propertiesPageSizeHeight !== null) {
            $queryParams['properties.pageSize.height'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPageSizeHeight);
        }// query params
        
        if ($propertiesPageSizeUnit !== null) {
            $queryParams['properties.pageSize.unit'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPageSizeUnit);
        }// query params
        
        if ($propertiesMarginsBottom !== null) {
            $queryParams['properties.margins.bottom'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsBottom);
        }// query params
        
        if ($propertiesMarginsLeft !== null) {
            $queryParams['properties.margins.left'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsLeft);
        }// query params
        
        if ($propertiesMarginsRight !== null) {
            $queryParams['properties.margins.right'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsRight);
        }// query params
        
        if ($propertiesMarginsTop !== null) {
            $queryParams['properties.margins.top'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsTop);
        }// query params
        
        if ($propertiesMarginsUnit !== null) {
            $queryParams['properties.margins.unit'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMarginsUnit);
        }// query params
        
        if ($propertiesPrintBackground !== null) {
            $queryParams['properties.printBackground'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPrintBackground);
        }// query params
        
        if ($propertiesHeaderHTML !== null) {
            $queryParams['properties.headerHTML'] = $this->apiClient->getSerializer()->toQueryValue($propertiesHeaderHTML);
        }// query params
        
        if ($propertiesFooterHTML !== null) {
            $queryParams['properties.footerHTML'] = $this->apiClient->getSerializer()->toQueryValue($propertiesFooterHTML);
        }// query params
        
        if ($propertiesTemplateData !== null) {
            $queryParams['properties.templateData'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTemplateData);
        }// query params
        
        if ($outputType !== null) {
            $queryParams['outputType'] = $this->apiClient->getSerializer()->toQueryValue($outputType);
        }// query params
        
        if ($input !== null) {
            $queryParams['input'] = $this->apiClient->getSerializer()->toQueryValue($input);
        }// query params
        
        if ($inputType !== null) {
            $queryParams['inputType'] = $this->apiClient->getSerializer()->toQueryValue($inputType);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * hTMLToPDFPostHtmlToPdf
     *
     * Convert HTML page to PDF document
     *
     * @param \Bytescout\Client\Model\HtmlToPdfRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function hTMLToPDFPostHtmlToPdf($data, $apikey = null)
    {
        list($response, $statusCode, $httpHeader) = $this->hTMLToPDFPostHtmlToPdfWithHttpInfo ($data, $apikey);
        return $response; 
    }


    /**
     * hTMLToPDFPostHtmlToPdfWithHttpInfo
     *
     * Convert HTML page to PDF document
     *
     * @param \Bytescout\Client\Model\HtmlToPdfRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function hTMLToPDFPostHtmlToPdfWithHttpInfo($data, $apikey = null)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling hTMLToPDFPostHtmlToPdf');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/htmltopdf/convert";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml'));
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
