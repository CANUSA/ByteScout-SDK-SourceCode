<?php
/**
 * BarcodeReaderApi
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Api;

use \Bytescout\Client\Configuration;
use \Bytescout\Client\ApiClient;
use \Bytescout\Client\ApiException;
use \Bytescout\Client\ObjectSerializer;

/**
 * BarcodeReaderApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BarcodeReaderApi
{

    /**
     * API Client
     * @var \Bytescout\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Bytescout\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://bytescout.io');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Bytescout\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Bytescout\Client\ApiClient $apiClient set the API client
     * @return BarcodeReaderApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * barcodeReaderBarcodeReaderGet
     *
     * Read barcodes from PDF document or PNG, JPEG, TIFF, BMP image
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of a page (zero-based) from which searching of BarCodes will be started (for PDF files).\r\n            Default value: all pages (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which searching of BarCodes will be finished (for PDF files).\r\n            Default value: all pages (optional)
     * @param int $propertiesCustomAreaX  (optional)
     * @param int $propertiesCustomAreaY  (optional)
     * @param int $propertiesCustomAreaWidth  (optional)
     * @param int $propertiesCustomAreaHeight  (optional)
     * @param int $propertiesCustomAreaLeft Default value: 0 (optional)
     * @param int $propertiesCustomAreaTop Default value: 0 (optional)
     * @param int $propertiesCustomAreaWidth2 Default value: 0 (optional)
     * @param int $propertiesCustomAreaHeight2 Default value: 0 (optional)
     * @param string $propertiesScanArea Default value: WholePage (optional)
     * @param bool $propertiesBarcodeTypesToFindEan8  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin8  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan13  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin13  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpce  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpca  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin12  (optional)
     * @param bool $propertiesBarcodeTypesToFindInterleaved2of5  (optional)
     * @param bool $propertiesBarcodeTypesToFindCirculari2of5  (optional)
     * @param bool $propertiesBarcodeTypesToFindItf14  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin14  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Extended  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Mod43  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Mod43Extended  (optional)
     * @param bool $propertiesBarcodeTypesToFindPzn  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpu  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode128  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan2  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan5  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1  (optional)
     * @param bool $propertiesBarcodeTypesToFindCodabar  (optional)
     * @param bool $propertiesBarcodeTypesToFindTrioptic  (optional)
     * @param bool $propertiesBarcodeTypesToFindPatchCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarOmnidirectional  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarExpanded  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarLimited  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarStacked  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarExpandedStacked  (optional)
     * @param bool $propertiesBarcodeTypesToFindPdf417  (optional)
     * @param bool $propertiesBarcodeTypesToFindDataMatrix  (optional)
     * @param bool $propertiesBarcodeTypesToFindQrCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindAztec  (optional)
     * @param bool $propertiesBarcodeTypesToFindMaxiCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindMicr  (optional)
     * @param bool $propertiesBarcodeTypesToFindIntelligentMail  (optional)
     * @param bool $propertiesBarcodeTypesToFindRoyalMail  (optional)
     * @param bool $propertiesBarcodeTypesToFindRoyalMailKIX  (optional)
     * @param bool $propertiesBarcodeTypesToFindAustralianPostCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindCodablockF  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode16K  (optional)
     * @param bool $propertiesBarcodeTypesToFindPostNet  (optional)
     * @param bool $propertiesBarcodeTypesToFindMicroPDF  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode93  (optional)
     * @param bool $propertiesBarcodeTypesToFindMsi  (optional)
     * @param bool $propertiesBarcodeTypesToFindPharmacode  (optional)
     * @param bool $propertiesBarcodeTypesToFindSegment  (optional)
     * @param bool $propertiesBarcodeTypesToFindCircle  (optional)
     * @param bool $propertiesBarcodeTypesToFindOval  (optional)
     * @param bool $propertiesBarcodeTypesToFindCheckbox  (optional)
     * @param bool $propertiesBarcodeTypesToFindHorizontalLine  (optional)
     * @param bool $propertiesBarcodeTypesToFindVerticalLine  (optional)
     * @param bool $propertiesBarcodeTypesToFindUnderlinedField  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll1D  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll2D  (optional)
     * @param bool $propertiesBarcodeTypesToFindAllOMRElements  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll  (optional)
     * @param string $propertiesOrientation Default value: Default (optional)
     * @param bool $propertiesSearchNegative Default value: False (optional)
     * @param bool $propertiesRequireQuietZones Default value: True (optional)
     * @param int $propertiesMaxNumberOfBarcodesPerPage Default value: 0 (optional)
     * @param int $propertiesDecodingTimeOut Default value: 10000 (10 seconds) (optional)
     * @param bool $propertiesLastDecodingTimeOutExceeded Default value: False (optional)
     * @param int $propertiesMaxNumberOfBarcodesPerDocument Default value: 0 (optional)
     * @param bool $propertiesAllowOrphanedSupplementals Default value: False (optional)
     * @param int $propertiesMinimalDataLength Default value: 0 (optional)
     * @param bool $propertiesMediumTrustLevelCompatible Default value: False (optional)
     * @param bool $propertiesOptimizedProcessingOfLargeImages Default value: False (optional)
     * @param int $propertiesOptimizedProcessingOfLargeImagesSizeLimit Default value: 1600 (optional)
     * @param bool $propertiesRemoveNoize Default value: False (optional)
     * @param int $propertiesNoiseRemovalFilterSize Default value: 2 (optional)
     * @param string $propertiesNoiseRemovalFilterType Default value: Blur (optional)
     * @param string $propertiesColorConversionMode Default value: ImageBlocks (optional)
     * @param int $propertiesContrast Default value: 0 (optional)
     * @param string $propertiesTextEncoding Default value: Default (optional)
     * @param int $propertiesTextEncodingCodePage Default value: 28591 (optional)
     * @param bool $propertiesTextEncodingUseUTF8 Default value: False (optional)
     * @param string $propertiesPdfReadingMode Default value: RenderPDF (optional)
     * @param int $propertiesPdfRenderingResolution Default value: 300 (optional)
     * @param bool $propertiesPdfRenderText Default value: True (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeReaderBarcodeReaderGet($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesCustomAreaX = null, $propertiesCustomAreaY = null, $propertiesCustomAreaWidth = null, $propertiesCustomAreaHeight = null, $propertiesCustomAreaLeft = null, $propertiesCustomAreaTop = null, $propertiesCustomAreaWidth2 = null, $propertiesCustomAreaHeight2 = null, $propertiesScanArea = null, $propertiesBarcodeTypesToFindEan8 = null, $propertiesBarcodeTypesToFindGtin8 = null, $propertiesBarcodeTypesToFindEan13 = null, $propertiesBarcodeTypesToFindGtin13 = null, $propertiesBarcodeTypesToFindUpce = null, $propertiesBarcodeTypesToFindUpca = null, $propertiesBarcodeTypesToFindGtin12 = null, $propertiesBarcodeTypesToFindInterleaved2of5 = null, $propertiesBarcodeTypesToFindCirculari2of5 = null, $propertiesBarcodeTypesToFindItf14 = null, $propertiesBarcodeTypesToFindGtin14 = null, $propertiesBarcodeTypesToFindCode39 = null, $propertiesBarcodeTypesToFindCode39Extended = null, $propertiesBarcodeTypesToFindCode39Mod43 = null, $propertiesBarcodeTypesToFindCode39Mod43Extended = null, $propertiesBarcodeTypesToFindPzn = null, $propertiesBarcodeTypesToFindUpu = null, $propertiesBarcodeTypesToFindCode128 = null, $propertiesBarcodeTypesToFindEan2 = null, $propertiesBarcodeTypesToFindEan5 = null, $propertiesBarcodeTypesToFindGs1 = null, $propertiesBarcodeTypesToFindCodabar = null, $propertiesBarcodeTypesToFindTrioptic = null, $propertiesBarcodeTypesToFindPatchCode = null, $propertiesBarcodeTypesToFindGs1DataBarOmnidirectional = null, $propertiesBarcodeTypesToFindGs1DataBarExpanded = null, $propertiesBarcodeTypesToFindGs1DataBarLimited = null, $propertiesBarcodeTypesToFindGs1DataBarStacked = null, $propertiesBarcodeTypesToFindGs1DataBarExpandedStacked = null, $propertiesBarcodeTypesToFindPdf417 = null, $propertiesBarcodeTypesToFindDataMatrix = null, $propertiesBarcodeTypesToFindQrCode = null, $propertiesBarcodeTypesToFindAztec = null, $propertiesBarcodeTypesToFindMaxiCode = null, $propertiesBarcodeTypesToFindMicr = null, $propertiesBarcodeTypesToFindIntelligentMail = null, $propertiesBarcodeTypesToFindRoyalMail = null, $propertiesBarcodeTypesToFindRoyalMailKIX = null, $propertiesBarcodeTypesToFindAustralianPostCode = null, $propertiesBarcodeTypesToFindCodablockF = null, $propertiesBarcodeTypesToFindCode16K = null, $propertiesBarcodeTypesToFindPostNet = null, $propertiesBarcodeTypesToFindMicroPDF = null, $propertiesBarcodeTypesToFindCode93 = null, $propertiesBarcodeTypesToFindMsi = null, $propertiesBarcodeTypesToFindPharmacode = null, $propertiesBarcodeTypesToFindSegment = null, $propertiesBarcodeTypesToFindCircle = null, $propertiesBarcodeTypesToFindOval = null, $propertiesBarcodeTypesToFindCheckbox = null, $propertiesBarcodeTypesToFindHorizontalLine = null, $propertiesBarcodeTypesToFindVerticalLine = null, $propertiesBarcodeTypesToFindUnderlinedField = null, $propertiesBarcodeTypesToFindAll1D = null, $propertiesBarcodeTypesToFindAll2D = null, $propertiesBarcodeTypesToFindAllOMRElements = null, $propertiesBarcodeTypesToFindAll = null, $propertiesOrientation = null, $propertiesSearchNegative = null, $propertiesRequireQuietZones = null, $propertiesMaxNumberOfBarcodesPerPage = null, $propertiesDecodingTimeOut = null, $propertiesLastDecodingTimeOutExceeded = null, $propertiesMaxNumberOfBarcodesPerDocument = null, $propertiesAllowOrphanedSupplementals = null, $propertiesMinimalDataLength = null, $propertiesMediumTrustLevelCompatible = null, $propertiesOptimizedProcessingOfLargeImages = null, $propertiesOptimizedProcessingOfLargeImagesSizeLimit = null, $propertiesRemoveNoize = null, $propertiesNoiseRemovalFilterSize = null, $propertiesNoiseRemovalFilterType = null, $propertiesColorConversionMode = null, $propertiesContrast = null, $propertiesTextEncoding = null, $propertiesTextEncodingCodePage = null, $propertiesTextEncodingUseUTF8 = null, $propertiesPdfReadingMode = null, $propertiesPdfRenderingResolution = null, $propertiesPdfRenderText = null, $outputType = null, $input = null, $inputType = null)
    {
        list($response, $statusCode, $httpHeader) = $this->barcodeReaderBarcodeReaderGetWithHttpInfo ($apikey, $propertiesStartPageIndex, $propertiesEndPageIndex, $propertiesCustomAreaX, $propertiesCustomAreaY, $propertiesCustomAreaWidth, $propertiesCustomAreaHeight, $propertiesCustomAreaLeft, $propertiesCustomAreaTop, $propertiesCustomAreaWidth2, $propertiesCustomAreaHeight2, $propertiesScanArea, $propertiesBarcodeTypesToFindEan8, $propertiesBarcodeTypesToFindGtin8, $propertiesBarcodeTypesToFindEan13, $propertiesBarcodeTypesToFindGtin13, $propertiesBarcodeTypesToFindUpce, $propertiesBarcodeTypesToFindUpca, $propertiesBarcodeTypesToFindGtin12, $propertiesBarcodeTypesToFindInterleaved2of5, $propertiesBarcodeTypesToFindCirculari2of5, $propertiesBarcodeTypesToFindItf14, $propertiesBarcodeTypesToFindGtin14, $propertiesBarcodeTypesToFindCode39, $propertiesBarcodeTypesToFindCode39Extended, $propertiesBarcodeTypesToFindCode39Mod43, $propertiesBarcodeTypesToFindCode39Mod43Extended, $propertiesBarcodeTypesToFindPzn, $propertiesBarcodeTypesToFindUpu, $propertiesBarcodeTypesToFindCode128, $propertiesBarcodeTypesToFindEan2, $propertiesBarcodeTypesToFindEan5, $propertiesBarcodeTypesToFindGs1, $propertiesBarcodeTypesToFindCodabar, $propertiesBarcodeTypesToFindTrioptic, $propertiesBarcodeTypesToFindPatchCode, $propertiesBarcodeTypesToFindGs1DataBarOmnidirectional, $propertiesBarcodeTypesToFindGs1DataBarExpanded, $propertiesBarcodeTypesToFindGs1DataBarLimited, $propertiesBarcodeTypesToFindGs1DataBarStacked, $propertiesBarcodeTypesToFindGs1DataBarExpandedStacked, $propertiesBarcodeTypesToFindPdf417, $propertiesBarcodeTypesToFindDataMatrix, $propertiesBarcodeTypesToFindQrCode, $propertiesBarcodeTypesToFindAztec, $propertiesBarcodeTypesToFindMaxiCode, $propertiesBarcodeTypesToFindMicr, $propertiesBarcodeTypesToFindIntelligentMail, $propertiesBarcodeTypesToFindRoyalMail, $propertiesBarcodeTypesToFindRoyalMailKIX, $propertiesBarcodeTypesToFindAustralianPostCode, $propertiesBarcodeTypesToFindCodablockF, $propertiesBarcodeTypesToFindCode16K, $propertiesBarcodeTypesToFindPostNet, $propertiesBarcodeTypesToFindMicroPDF, $propertiesBarcodeTypesToFindCode93, $propertiesBarcodeTypesToFindMsi, $propertiesBarcodeTypesToFindPharmacode, $propertiesBarcodeTypesToFindSegment, $propertiesBarcodeTypesToFindCircle, $propertiesBarcodeTypesToFindOval, $propertiesBarcodeTypesToFindCheckbox, $propertiesBarcodeTypesToFindHorizontalLine, $propertiesBarcodeTypesToFindVerticalLine, $propertiesBarcodeTypesToFindUnderlinedField, $propertiesBarcodeTypesToFindAll1D, $propertiesBarcodeTypesToFindAll2D, $propertiesBarcodeTypesToFindAllOMRElements, $propertiesBarcodeTypesToFindAll, $propertiesOrientation, $propertiesSearchNegative, $propertiesRequireQuietZones, $propertiesMaxNumberOfBarcodesPerPage, $propertiesDecodingTimeOut, $propertiesLastDecodingTimeOutExceeded, $propertiesMaxNumberOfBarcodesPerDocument, $propertiesAllowOrphanedSupplementals, $propertiesMinimalDataLength, $propertiesMediumTrustLevelCompatible, $propertiesOptimizedProcessingOfLargeImages, $propertiesOptimizedProcessingOfLargeImagesSizeLimit, $propertiesRemoveNoize, $propertiesNoiseRemovalFilterSize, $propertiesNoiseRemovalFilterType, $propertiesColorConversionMode, $propertiesContrast, $propertiesTextEncoding, $propertiesTextEncodingCodePage, $propertiesTextEncodingUseUTF8, $propertiesPdfReadingMode, $propertiesPdfRenderingResolution, $propertiesPdfRenderText, $outputType, $input, $inputType);
        return $response; 
    }


    /**
     * barcodeReaderBarcodeReaderGetWithHttpInfo
     *
     * Read barcodes from PDF document or PNG, JPEG, TIFF, BMP image
     *
     * @param string $apikey User&#39;s ApiKey (optional)
     * @param int $propertiesStartPageIndex Index of a page (zero-based) from which searching of BarCodes will be started (for PDF files).\r\n            Default value: all pages (optional)
     * @param int $propertiesEndPageIndex Index of a page (zero-based) on which searching of BarCodes will be finished (for PDF files).\r\n            Default value: all pages (optional)
     * @param int $propertiesCustomAreaX  (optional)
     * @param int $propertiesCustomAreaY  (optional)
     * @param int $propertiesCustomAreaWidth  (optional)
     * @param int $propertiesCustomAreaHeight  (optional)
     * @param int $propertiesCustomAreaLeft Default value: 0 (optional)
     * @param int $propertiesCustomAreaTop Default value: 0 (optional)
     * @param int $propertiesCustomAreaWidth2 Default value: 0 (optional)
     * @param int $propertiesCustomAreaHeight2 Default value: 0 (optional)
     * @param string $propertiesScanArea Default value: WholePage (optional)
     * @param bool $propertiesBarcodeTypesToFindEan8  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin8  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan13  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin13  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpce  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpca  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin12  (optional)
     * @param bool $propertiesBarcodeTypesToFindInterleaved2of5  (optional)
     * @param bool $propertiesBarcodeTypesToFindCirculari2of5  (optional)
     * @param bool $propertiesBarcodeTypesToFindItf14  (optional)
     * @param bool $propertiesBarcodeTypesToFindGtin14  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Extended  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Mod43  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode39Mod43Extended  (optional)
     * @param bool $propertiesBarcodeTypesToFindPzn  (optional)
     * @param bool $propertiesBarcodeTypesToFindUpu  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode128  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan2  (optional)
     * @param bool $propertiesBarcodeTypesToFindEan5  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1  (optional)
     * @param bool $propertiesBarcodeTypesToFindCodabar  (optional)
     * @param bool $propertiesBarcodeTypesToFindTrioptic  (optional)
     * @param bool $propertiesBarcodeTypesToFindPatchCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarOmnidirectional  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarExpanded  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarLimited  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarStacked  (optional)
     * @param bool $propertiesBarcodeTypesToFindGs1DataBarExpandedStacked  (optional)
     * @param bool $propertiesBarcodeTypesToFindPdf417  (optional)
     * @param bool $propertiesBarcodeTypesToFindDataMatrix  (optional)
     * @param bool $propertiesBarcodeTypesToFindQrCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindAztec  (optional)
     * @param bool $propertiesBarcodeTypesToFindMaxiCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindMicr  (optional)
     * @param bool $propertiesBarcodeTypesToFindIntelligentMail  (optional)
     * @param bool $propertiesBarcodeTypesToFindRoyalMail  (optional)
     * @param bool $propertiesBarcodeTypesToFindRoyalMailKIX  (optional)
     * @param bool $propertiesBarcodeTypesToFindAustralianPostCode  (optional)
     * @param bool $propertiesBarcodeTypesToFindCodablockF  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode16K  (optional)
     * @param bool $propertiesBarcodeTypesToFindPostNet  (optional)
     * @param bool $propertiesBarcodeTypesToFindMicroPDF  (optional)
     * @param bool $propertiesBarcodeTypesToFindCode93  (optional)
     * @param bool $propertiesBarcodeTypesToFindMsi  (optional)
     * @param bool $propertiesBarcodeTypesToFindPharmacode  (optional)
     * @param bool $propertiesBarcodeTypesToFindSegment  (optional)
     * @param bool $propertiesBarcodeTypesToFindCircle  (optional)
     * @param bool $propertiesBarcodeTypesToFindOval  (optional)
     * @param bool $propertiesBarcodeTypesToFindCheckbox  (optional)
     * @param bool $propertiesBarcodeTypesToFindHorizontalLine  (optional)
     * @param bool $propertiesBarcodeTypesToFindVerticalLine  (optional)
     * @param bool $propertiesBarcodeTypesToFindUnderlinedField  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll1D  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll2D  (optional)
     * @param bool $propertiesBarcodeTypesToFindAllOMRElements  (optional)
     * @param bool $propertiesBarcodeTypesToFindAll  (optional)
     * @param string $propertiesOrientation Default value: Default (optional)
     * @param bool $propertiesSearchNegative Default value: False (optional)
     * @param bool $propertiesRequireQuietZones Default value: True (optional)
     * @param int $propertiesMaxNumberOfBarcodesPerPage Default value: 0 (optional)
     * @param int $propertiesDecodingTimeOut Default value: 10000 (10 seconds) (optional)
     * @param bool $propertiesLastDecodingTimeOutExceeded Default value: False (optional)
     * @param int $propertiesMaxNumberOfBarcodesPerDocument Default value: 0 (optional)
     * @param bool $propertiesAllowOrphanedSupplementals Default value: False (optional)
     * @param int $propertiesMinimalDataLength Default value: 0 (optional)
     * @param bool $propertiesMediumTrustLevelCompatible Default value: False (optional)
     * @param bool $propertiesOptimizedProcessingOfLargeImages Default value: False (optional)
     * @param int $propertiesOptimizedProcessingOfLargeImagesSizeLimit Default value: 1600 (optional)
     * @param bool $propertiesRemoveNoize Default value: False (optional)
     * @param int $propertiesNoiseRemovalFilterSize Default value: 2 (optional)
     * @param string $propertiesNoiseRemovalFilterType Default value: Blur (optional)
     * @param string $propertiesColorConversionMode Default value: ImageBlocks (optional)
     * @param int $propertiesContrast Default value: 0 (optional)
     * @param string $propertiesTextEncoding Default value: Default (optional)
     * @param int $propertiesTextEncodingCodePage Default value: 28591 (optional)
     * @param bool $propertiesTextEncodingUseUTF8 Default value: False (optional)
     * @param string $propertiesPdfReadingMode Default value: RenderPDF (optional)
     * @param int $propertiesPdfRenderingResolution Default value: 300 (optional)
     * @param bool $propertiesPdfRenderText Default value: True (optional)
     * @param string $outputType Type in which you want to get result of extracting (optional). Default value: Content. \r\n            IMPORTANT: \r\n            Link type generates public unique link to download, file is removed after default StorageTime(see File API). \r\n            LinkPrivate generates private unique link which should NOT be shared as it can be accessed with your api key only! (optional)
     * @param string $input Input Data (optional)
     * @param string $inputType Type of Input Data (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeReaderBarcodeReaderGetWithHttpInfo($apikey = null, $propertiesStartPageIndex = null, $propertiesEndPageIndex = null, $propertiesCustomAreaX = null, $propertiesCustomAreaY = null, $propertiesCustomAreaWidth = null, $propertiesCustomAreaHeight = null, $propertiesCustomAreaLeft = null, $propertiesCustomAreaTop = null, $propertiesCustomAreaWidth2 = null, $propertiesCustomAreaHeight2 = null, $propertiesScanArea = null, $propertiesBarcodeTypesToFindEan8 = null, $propertiesBarcodeTypesToFindGtin8 = null, $propertiesBarcodeTypesToFindEan13 = null, $propertiesBarcodeTypesToFindGtin13 = null, $propertiesBarcodeTypesToFindUpce = null, $propertiesBarcodeTypesToFindUpca = null, $propertiesBarcodeTypesToFindGtin12 = null, $propertiesBarcodeTypesToFindInterleaved2of5 = null, $propertiesBarcodeTypesToFindCirculari2of5 = null, $propertiesBarcodeTypesToFindItf14 = null, $propertiesBarcodeTypesToFindGtin14 = null, $propertiesBarcodeTypesToFindCode39 = null, $propertiesBarcodeTypesToFindCode39Extended = null, $propertiesBarcodeTypesToFindCode39Mod43 = null, $propertiesBarcodeTypesToFindCode39Mod43Extended = null, $propertiesBarcodeTypesToFindPzn = null, $propertiesBarcodeTypesToFindUpu = null, $propertiesBarcodeTypesToFindCode128 = null, $propertiesBarcodeTypesToFindEan2 = null, $propertiesBarcodeTypesToFindEan5 = null, $propertiesBarcodeTypesToFindGs1 = null, $propertiesBarcodeTypesToFindCodabar = null, $propertiesBarcodeTypesToFindTrioptic = null, $propertiesBarcodeTypesToFindPatchCode = null, $propertiesBarcodeTypesToFindGs1DataBarOmnidirectional = null, $propertiesBarcodeTypesToFindGs1DataBarExpanded = null, $propertiesBarcodeTypesToFindGs1DataBarLimited = null, $propertiesBarcodeTypesToFindGs1DataBarStacked = null, $propertiesBarcodeTypesToFindGs1DataBarExpandedStacked = null, $propertiesBarcodeTypesToFindPdf417 = null, $propertiesBarcodeTypesToFindDataMatrix = null, $propertiesBarcodeTypesToFindQrCode = null, $propertiesBarcodeTypesToFindAztec = null, $propertiesBarcodeTypesToFindMaxiCode = null, $propertiesBarcodeTypesToFindMicr = null, $propertiesBarcodeTypesToFindIntelligentMail = null, $propertiesBarcodeTypesToFindRoyalMail = null, $propertiesBarcodeTypesToFindRoyalMailKIX = null, $propertiesBarcodeTypesToFindAustralianPostCode = null, $propertiesBarcodeTypesToFindCodablockF = null, $propertiesBarcodeTypesToFindCode16K = null, $propertiesBarcodeTypesToFindPostNet = null, $propertiesBarcodeTypesToFindMicroPDF = null, $propertiesBarcodeTypesToFindCode93 = null, $propertiesBarcodeTypesToFindMsi = null, $propertiesBarcodeTypesToFindPharmacode = null, $propertiesBarcodeTypesToFindSegment = null, $propertiesBarcodeTypesToFindCircle = null, $propertiesBarcodeTypesToFindOval = null, $propertiesBarcodeTypesToFindCheckbox = null, $propertiesBarcodeTypesToFindHorizontalLine = null, $propertiesBarcodeTypesToFindVerticalLine = null, $propertiesBarcodeTypesToFindUnderlinedField = null, $propertiesBarcodeTypesToFindAll1D = null, $propertiesBarcodeTypesToFindAll2D = null, $propertiesBarcodeTypesToFindAllOMRElements = null, $propertiesBarcodeTypesToFindAll = null, $propertiesOrientation = null, $propertiesSearchNegative = null, $propertiesRequireQuietZones = null, $propertiesMaxNumberOfBarcodesPerPage = null, $propertiesDecodingTimeOut = null, $propertiesLastDecodingTimeOutExceeded = null, $propertiesMaxNumberOfBarcodesPerDocument = null, $propertiesAllowOrphanedSupplementals = null, $propertiesMinimalDataLength = null, $propertiesMediumTrustLevelCompatible = null, $propertiesOptimizedProcessingOfLargeImages = null, $propertiesOptimizedProcessingOfLargeImagesSizeLimit = null, $propertiesRemoveNoize = null, $propertiesNoiseRemovalFilterSize = null, $propertiesNoiseRemovalFilterType = null, $propertiesColorConversionMode = null, $propertiesContrast = null, $propertiesTextEncoding = null, $propertiesTextEncodingCodePage = null, $propertiesTextEncodingUseUTF8 = null, $propertiesPdfReadingMode = null, $propertiesPdfRenderingResolution = null, $propertiesPdfRenderText = null, $outputType = null, $input = null, $inputType = null)
    {
        
  
        // parse inputs
        $resourcePath = "/api/v1/barcodereader/read";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }// query params
        
        if ($propertiesStartPageIndex !== null) {
            $queryParams['properties.startPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesStartPageIndex);
        }// query params
        
        if ($propertiesEndPageIndex !== null) {
            $queryParams['properties.endPageIndex'] = $this->apiClient->getSerializer()->toQueryValue($propertiesEndPageIndex);
        }// query params
        
        if ($propertiesCustomAreaX !== null) {
            $queryParams['properties.customArea.x'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaX);
        }// query params
        
        if ($propertiesCustomAreaY !== null) {
            $queryParams['properties.customArea.y'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaY);
        }// query params
        
        if ($propertiesCustomAreaWidth !== null) {
            $queryParams['properties.customArea.width'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaWidth);
        }// query params
        
        if ($propertiesCustomAreaHeight !== null) {
            $queryParams['properties.customArea.height'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaHeight);
        }// query params
        
        if ($propertiesCustomAreaLeft !== null) {
            $queryParams['properties.customAreaLeft'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaLeft);
        }// query params
        
        if ($propertiesCustomAreaTop !== null) {
            $queryParams['properties.customAreaTop'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaTop);
        }// query params
        
        if ($propertiesCustomAreaWidth2 !== null) {
            $queryParams['properties.customAreaWidth'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaWidth2);
        }// query params
        
        if ($propertiesCustomAreaHeight2 !== null) {
            $queryParams['properties.customAreaHeight'] = $this->apiClient->getSerializer()->toQueryValue($propertiesCustomAreaHeight2);
        }// query params
        
        if ($propertiesScanArea !== null) {
            $queryParams['properties.scanArea'] = $this->apiClient->getSerializer()->toQueryValue($propertiesScanArea);
        }// query params
        
        if ($propertiesBarcodeTypesToFindEan8 !== null) {
            $queryParams['properties.barcodeTypesToFind.ean8'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindEan8);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGtin8 !== null) {
            $queryParams['properties.barcodeTypesToFind.gtin8'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGtin8);
        }// query params
        
        if ($propertiesBarcodeTypesToFindEan13 !== null) {
            $queryParams['properties.barcodeTypesToFind.ean13'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindEan13);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGtin13 !== null) {
            $queryParams['properties.barcodeTypesToFind.gtin13'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGtin13);
        }// query params
        
        if ($propertiesBarcodeTypesToFindUpce !== null) {
            $queryParams['properties.barcodeTypesToFind.upce'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindUpce);
        }// query params
        
        if ($propertiesBarcodeTypesToFindUpca !== null) {
            $queryParams['properties.barcodeTypesToFind.upca'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindUpca);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGtin12 !== null) {
            $queryParams['properties.barcodeTypesToFind.gtin12'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGtin12);
        }// query params
        
        if ($propertiesBarcodeTypesToFindInterleaved2of5 !== null) {
            $queryParams['properties.barcodeTypesToFind.interleaved2of5'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindInterleaved2of5);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCirculari2of5 !== null) {
            $queryParams['properties.barcodeTypesToFind.circulari2of5'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCirculari2of5);
        }// query params
        
        if ($propertiesBarcodeTypesToFindItf14 !== null) {
            $queryParams['properties.barcodeTypesToFind.itf14'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindItf14);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGtin14 !== null) {
            $queryParams['properties.barcodeTypesToFind.gtin14'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGtin14);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode39 !== null) {
            $queryParams['properties.barcodeTypesToFind.code39'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode39);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode39Extended !== null) {
            $queryParams['properties.barcodeTypesToFind.code39Extended'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode39Extended);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode39Mod43 !== null) {
            $queryParams['properties.barcodeTypesToFind.code39Mod43'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode39Mod43);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode39Mod43Extended !== null) {
            $queryParams['properties.barcodeTypesToFind.code39Mod43Extended'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode39Mod43Extended);
        }// query params
        
        if ($propertiesBarcodeTypesToFindPzn !== null) {
            $queryParams['properties.barcodeTypesToFind.pzn'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindPzn);
        }// query params
        
        if ($propertiesBarcodeTypesToFindUpu !== null) {
            $queryParams['properties.barcodeTypesToFind.upu'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindUpu);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode128 !== null) {
            $queryParams['properties.barcodeTypesToFind.code128'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode128);
        }// query params
        
        if ($propertiesBarcodeTypesToFindEan2 !== null) {
            $queryParams['properties.barcodeTypesToFind.ean2'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindEan2);
        }// query params
        
        if ($propertiesBarcodeTypesToFindEan5 !== null) {
            $queryParams['properties.barcodeTypesToFind.ean5'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindEan5);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1 !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCodabar !== null) {
            $queryParams['properties.barcodeTypesToFind.codabar'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCodabar);
        }// query params
        
        if ($propertiesBarcodeTypesToFindTrioptic !== null) {
            $queryParams['properties.barcodeTypesToFind.trioptic'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindTrioptic);
        }// query params
        
        if ($propertiesBarcodeTypesToFindPatchCode !== null) {
            $queryParams['properties.barcodeTypesToFind.patchCode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindPatchCode);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1DataBarOmnidirectional !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1DataBarOmnidirectional'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1DataBarOmnidirectional);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1DataBarExpanded !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1DataBarExpanded'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1DataBarExpanded);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1DataBarLimited !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1DataBarLimited'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1DataBarLimited);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1DataBarStacked !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1DataBarStacked'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1DataBarStacked);
        }// query params
        
        if ($propertiesBarcodeTypesToFindGs1DataBarExpandedStacked !== null) {
            $queryParams['properties.barcodeTypesToFind.gs1DataBarExpandedStacked'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindGs1DataBarExpandedStacked);
        }// query params
        
        if ($propertiesBarcodeTypesToFindPdf417 !== null) {
            $queryParams['properties.barcodeTypesToFind.pdf417'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindPdf417);
        }// query params
        
        if ($propertiesBarcodeTypesToFindDataMatrix !== null) {
            $queryParams['properties.barcodeTypesToFind.dataMatrix'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindDataMatrix);
        }// query params
        
        if ($propertiesBarcodeTypesToFindQrCode !== null) {
            $queryParams['properties.barcodeTypesToFind.qrCode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindQrCode);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAztec !== null) {
            $queryParams['properties.barcodeTypesToFind.aztec'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAztec);
        }// query params
        
        if ($propertiesBarcodeTypesToFindMaxiCode !== null) {
            $queryParams['properties.barcodeTypesToFind.maxiCode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindMaxiCode);
        }// query params
        
        if ($propertiesBarcodeTypesToFindMicr !== null) {
            $queryParams['properties.barcodeTypesToFind.micr'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindMicr);
        }// query params
        
        if ($propertiesBarcodeTypesToFindIntelligentMail !== null) {
            $queryParams['properties.barcodeTypesToFind.intelligentMail'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindIntelligentMail);
        }// query params
        
        if ($propertiesBarcodeTypesToFindRoyalMail !== null) {
            $queryParams['properties.barcodeTypesToFind.royalMail'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindRoyalMail);
        }// query params
        
        if ($propertiesBarcodeTypesToFindRoyalMailKIX !== null) {
            $queryParams['properties.barcodeTypesToFind.royalMailKIX'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindRoyalMailKIX);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAustralianPostCode !== null) {
            $queryParams['properties.barcodeTypesToFind.australianPostCode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAustralianPostCode);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCodablockF !== null) {
            $queryParams['properties.barcodeTypesToFind.codablockF'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCodablockF);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode16K !== null) {
            $queryParams['properties.barcodeTypesToFind.code16K'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode16K);
        }// query params
        
        if ($propertiesBarcodeTypesToFindPostNet !== null) {
            $queryParams['properties.barcodeTypesToFind.postNet'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindPostNet);
        }// query params
        
        if ($propertiesBarcodeTypesToFindMicroPDF !== null) {
            $queryParams['properties.barcodeTypesToFind.microPDF'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindMicroPDF);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCode93 !== null) {
            $queryParams['properties.barcodeTypesToFind.code93'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCode93);
        }// query params
        
        if ($propertiesBarcodeTypesToFindMsi !== null) {
            $queryParams['properties.barcodeTypesToFind.msi'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindMsi);
        }// query params
        
        if ($propertiesBarcodeTypesToFindPharmacode !== null) {
            $queryParams['properties.barcodeTypesToFind.pharmacode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindPharmacode);
        }// query params
        
        if ($propertiesBarcodeTypesToFindSegment !== null) {
            $queryParams['properties.barcodeTypesToFind.segment'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindSegment);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCircle !== null) {
            $queryParams['properties.barcodeTypesToFind.circle'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCircle);
        }// query params
        
        if ($propertiesBarcodeTypesToFindOval !== null) {
            $queryParams['properties.barcodeTypesToFind.oval'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindOval);
        }// query params
        
        if ($propertiesBarcodeTypesToFindCheckbox !== null) {
            $queryParams['properties.barcodeTypesToFind.checkbox'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindCheckbox);
        }// query params
        
        if ($propertiesBarcodeTypesToFindHorizontalLine !== null) {
            $queryParams['properties.barcodeTypesToFind.horizontalLine'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindHorizontalLine);
        }// query params
        
        if ($propertiesBarcodeTypesToFindVerticalLine !== null) {
            $queryParams['properties.barcodeTypesToFind.verticalLine'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindVerticalLine);
        }// query params
        
        if ($propertiesBarcodeTypesToFindUnderlinedField !== null) {
            $queryParams['properties.barcodeTypesToFind.underlinedField'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindUnderlinedField);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAll1D !== null) {
            $queryParams['properties.barcodeTypesToFind.all1D'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAll1D);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAll2D !== null) {
            $queryParams['properties.barcodeTypesToFind.all2D'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAll2D);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAllOMRElements !== null) {
            $queryParams['properties.barcodeTypesToFind.allOMRElements'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAllOMRElements);
        }// query params
        
        if ($propertiesBarcodeTypesToFindAll !== null) {
            $queryParams['properties.barcodeTypesToFind.all'] = $this->apiClient->getSerializer()->toQueryValue($propertiesBarcodeTypesToFindAll);
        }// query params
        
        if ($propertiesOrientation !== null) {
            $queryParams['properties.orientation'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOrientation);
        }// query params
        
        if ($propertiesSearchNegative !== null) {
            $queryParams['properties.searchNegative'] = $this->apiClient->getSerializer()->toQueryValue($propertiesSearchNegative);
        }// query params
        
        if ($propertiesRequireQuietZones !== null) {
            $queryParams['properties.requireQuietZones'] = $this->apiClient->getSerializer()->toQueryValue($propertiesRequireQuietZones);
        }// query params
        
        if ($propertiesMaxNumberOfBarcodesPerPage !== null) {
            $queryParams['properties.maxNumberOfBarcodesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMaxNumberOfBarcodesPerPage);
        }// query params
        
        if ($propertiesDecodingTimeOut !== null) {
            $queryParams['properties.decodingTimeOut'] = $this->apiClient->getSerializer()->toQueryValue($propertiesDecodingTimeOut);
        }// query params
        
        if ($propertiesLastDecodingTimeOutExceeded !== null) {
            $queryParams['properties.lastDecodingTimeOutExceeded'] = $this->apiClient->getSerializer()->toQueryValue($propertiesLastDecodingTimeOutExceeded);
        }// query params
        
        if ($propertiesMaxNumberOfBarcodesPerDocument !== null) {
            $queryParams['properties.maxNumberOfBarcodesPerDocument'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMaxNumberOfBarcodesPerDocument);
        }// query params
        
        if ($propertiesAllowOrphanedSupplementals !== null) {
            $queryParams['properties.allowOrphanedSupplementals'] = $this->apiClient->getSerializer()->toQueryValue($propertiesAllowOrphanedSupplementals);
        }// query params
        
        if ($propertiesMinimalDataLength !== null) {
            $queryParams['properties.minimalDataLength'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMinimalDataLength);
        }// query params
        
        if ($propertiesMediumTrustLevelCompatible !== null) {
            $queryParams['properties.mediumTrustLevelCompatible'] = $this->apiClient->getSerializer()->toQueryValue($propertiesMediumTrustLevelCompatible);
        }// query params
        
        if ($propertiesOptimizedProcessingOfLargeImages !== null) {
            $queryParams['properties.optimizedProcessingOfLargeImages'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOptimizedProcessingOfLargeImages);
        }// query params
        
        if ($propertiesOptimizedProcessingOfLargeImagesSizeLimit !== null) {
            $queryParams['properties.optimizedProcessingOfLargeImagesSizeLimit'] = $this->apiClient->getSerializer()->toQueryValue($propertiesOptimizedProcessingOfLargeImagesSizeLimit);
        }// query params
        
        if ($propertiesRemoveNoize !== null) {
            $queryParams['properties.removeNoize'] = $this->apiClient->getSerializer()->toQueryValue($propertiesRemoveNoize);
        }// query params
        
        if ($propertiesNoiseRemovalFilterSize !== null) {
            $queryParams['properties.noiseRemovalFilterSize'] = $this->apiClient->getSerializer()->toQueryValue($propertiesNoiseRemovalFilterSize);
        }// query params
        
        if ($propertiesNoiseRemovalFilterType !== null) {
            $queryParams['properties.noiseRemovalFilterType'] = $this->apiClient->getSerializer()->toQueryValue($propertiesNoiseRemovalFilterType);
        }// query params
        
        if ($propertiesColorConversionMode !== null) {
            $queryParams['properties.colorConversionMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesColorConversionMode);
        }// query params
        
        if ($propertiesContrast !== null) {
            $queryParams['properties.contrast'] = $this->apiClient->getSerializer()->toQueryValue($propertiesContrast);
        }// query params
        
        if ($propertiesTextEncoding !== null) {
            $queryParams['properties.textEncoding'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTextEncoding);
        }// query params
        
        if ($propertiesTextEncodingCodePage !== null) {
            $queryParams['properties.textEncodingCodePage'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTextEncodingCodePage);
        }// query params
        
        if ($propertiesTextEncodingUseUTF8 !== null) {
            $queryParams['properties.textEncodingUseUTF8'] = $this->apiClient->getSerializer()->toQueryValue($propertiesTextEncodingUseUTF8);
        }// query params
        
        if ($propertiesPdfReadingMode !== null) {
            $queryParams['properties.pdfReadingMode'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPdfReadingMode);
        }// query params
        
        if ($propertiesPdfRenderingResolution !== null) {
            $queryParams['properties.pdfRenderingResolution'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPdfRenderingResolution);
        }// query params
        
        if ($propertiesPdfRenderText !== null) {
            $queryParams['properties.pdfRenderText'] = $this->apiClient->getSerializer()->toQueryValue($propertiesPdfRenderText);
        }// query params
        
        if ($outputType !== null) {
            $queryParams['outputType'] = $this->apiClient->getSerializer()->toQueryValue($outputType);
        }// query params
        
        if ($input !== null) {
            $queryParams['input'] = $this->apiClient->getSerializer()->toQueryValue($input);
        }// query params
        
        if ($inputType !== null) {
            $queryParams['inputType'] = $this->apiClient->getSerializer()->toQueryValue($inputType);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * barcodeReaderBarcodeReaderPost
     *
     * Read barcodes from PDF document or PNG, JPEG, TIFF, BMP image
     *
     * @param \Bytescout\Client\Model\BarcodeReaderRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return string
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeReaderBarcodeReaderPost($data, $apikey = null)
    {
        list($response, $statusCode, $httpHeader) = $this->barcodeReaderBarcodeReaderPostWithHttpInfo ($data, $apikey);
        return $response; 
    }


    /**
     * barcodeReaderBarcodeReaderPostWithHttpInfo
     *
     * Read barcodes from PDF document or PNG, JPEG, TIFF, BMP image
     *
     * @param \Bytescout\Client\Model\BarcodeReaderRequestVm $data  (required)
     * @param string $apikey User&#39;s ApiKey (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Bytescout\Client\ApiException on non-2xx response
     */
    public function barcodeReaderBarcodeReaderPostWithHttpInfo($data, $apikey = null)
    {
        
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling barcodeReaderBarcodeReaderPost');
        }
  
        // parse inputs
        $resourcePath = "/api/v1/barcodereader/read";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'text/json', 'application/xml', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','text/json','application/xml','text/xml'));
  
        // query params
        
        if ($apikey !== null) {
            $queryParams['apikey'] = $this->apiClient->getSerializer()->toQueryValue($apikey);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, 'string'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Bytescout\Client\ObjectSerializer::deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 401:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 403:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\BadRequestModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 500:
                $data = \Bytescout\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Bytescout\Client\Model\ExceptionResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
