<?php
/**
 * HtmlToPdfOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * HtmlToPdfOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HtmlToPdfOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'title' => 'string',
        'orientation' => 'string',
        'pageSize' => '\Bytescout\Client\Model\PageSizeVm',
        'margins' => '\Bytescout\Client\Model\MarginSettingsVm',
        'printBackground' => 'bool',
        'headerHTML' => 'string',
        'footerHTML' => 'string',
        'templateData' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'title' => 'title',
        'orientation' => 'orientation',
        'pageSize' => 'pageSize',
        'margins' => 'margins',
        'printBackground' => 'printBackground',
        'headerHTML' => 'headerHTML',
        'footerHTML' => 'footerHTML',
        'templateData' => 'templateData'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'title' => 'setTitle',
        'orientation' => 'setOrientation',
        'pageSize' => 'setPageSize',
        'margins' => 'setMargins',
        'printBackground' => 'setPrintBackground',
        'headerHTML' => 'setHeaderHTML',
        'footerHTML' => 'setFooterHTML',
        'templateData' => 'setTemplateData'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'title' => 'getTitle',
        'orientation' => 'getOrientation',
        'pageSize' => 'getPageSize',
        'margins' => 'getMargins',
        'printBackground' => 'getPrintBackground',
        'headerHTML' => 'getHeaderHTML',
        'footerHTML' => 'getFooterHTML',
        'templateData' => 'getTemplateData'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $title Title of a PDF file.
      * @var string
      */
    protected $title;
    
    /**
      * $orientation Orientation of pages of a PDF file.\r\n            Default value: Portrait
      * @var string
      */
    protected $orientation;
    
    /**
      * $pageSize Size of pages of a PDF file.\r\n            Default value: A4.
      * @var \Bytescout\Client\Model\PageSizeVm
      */
    protected $pageSize;
    
    /**
      * $margins Margin of pages of a PDF file.
      * @var \Bytescout\Client\Model\MarginSettingsVm
      */
    protected $margins;
    
    /**
      * $printBackground Define print background of a page or not.\r\n            Default value: true
      * @var bool
      */
    protected $printBackground;
    
    /**
      * $headerHTML HTML code which will be inserted in header of pages.\r\n            Default value: null
      * @var string
      */
    protected $headerHTML;
    
    /**
      * $footerHTML HTML code which will be inserted in footer of pages.\r\n            Default value: null
      * @var string
      */
    protected $footerHTML;
    
    /**
      * $templateData String of JSON data which will be used for generation PDF file from template
      * @var string
      */
    protected $templateData;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->title = $data["title"];
            $this->orientation = $data["orientation"];
            $this->pageSize = $data["pageSize"];
            $this->margins = $data["margins"];
            $this->printBackground = $data["printBackground"];
            $this->headerHTML = $data["headerHTML"];
            $this->footerHTML = $data["footerHTML"];
            $this->templateData = $data["templateData"];
        }
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title Title of a PDF file.
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets orientation
     * @return string
     */
    public function getOrientation()
    {
        return $this->orientation;
    }
  
    /**
     * Sets orientation
     * @param string $orientation Orientation of pages of a PDF file.\r\n            Default value: Portrait
     * @return $this
     */
    public function setOrientation($orientation)
    {
        $allowed_values = array("portrait", "landscape");
        if (!in_array($orientation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'orientation', must be one of 'portrait', 'landscape'");
        }
        $this->orientation = $orientation;
        return $this;
    }
    
    /**
     * Gets pageSize
     * @return \Bytescout\Client\Model\PageSizeVm
     */
    public function getPageSize()
    {
        return $this->pageSize;
    }
  
    /**
     * Sets pageSize
     * @param \Bytescout\Client\Model\PageSizeVm $pageSize Size of pages of a PDF file.\r\n            Default value: A4.
     * @return $this
     */
    public function setPageSize($pageSize)
    {
        
        $this->pageSize = $pageSize;
        return $this;
    }
    
    /**
     * Gets margins
     * @return \Bytescout\Client\Model\MarginSettingsVm
     */
    public function getMargins()
    {
        return $this->margins;
    }
  
    /**
     * Sets margins
     * @param \Bytescout\Client\Model\MarginSettingsVm $margins Margin of pages of a PDF file.
     * @return $this
     */
    public function setMargins($margins)
    {
        
        $this->margins = $margins;
        return $this;
    }
    
    /**
     * Gets printBackground
     * @return bool
     */
    public function getPrintBackground()
    {
        return $this->printBackground;
    }
  
    /**
     * Sets printBackground
     * @param bool $printBackground Define print background of a page or not.\r\n            Default value: true
     * @return $this
     */
    public function setPrintBackground($printBackground)
    {
        
        $this->printBackground = $printBackground;
        return $this;
    }
    
    /**
     * Gets headerHTML
     * @return string
     */
    public function getHeaderHTML()
    {
        return $this->headerHTML;
    }
  
    /**
     * Sets headerHTML
     * @param string $headerHTML HTML code which will be inserted in header of pages.\r\n            Default value: null
     * @return $this
     */
    public function setHeaderHTML($headerHTML)
    {
        
        $this->headerHTML = $headerHTML;
        return $this;
    }
    
    /**
     * Gets footerHTML
     * @return string
     */
    public function getFooterHTML()
    {
        return $this->footerHTML;
    }
  
    /**
     * Sets footerHTML
     * @param string $footerHTML HTML code which will be inserted in footer of pages.\r\n            Default value: null
     * @return $this
     */
    public function setFooterHTML($footerHTML)
    {
        
        $this->footerHTML = $footerHTML;
        return $this;
    }
    
    /**
     * Gets templateData
     * @return string
     */
    public function getTemplateData()
    {
        return $this->templateData;
    }
  
    /**
     * Sets templateData
     * @param string $templateData String of JSON data which will be used for generation PDF file from template
     * @return $this
     */
    public function setTemplateData($templateData)
    {
        
        $this->templateData = $templateData;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
