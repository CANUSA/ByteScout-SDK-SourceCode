<?php
/**
 * BarcodeOptionsVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bytescout\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bytescout\Client\Model;

use \ArrayAccess;
/**
 * BarcodeOptionsVm Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Bytescout\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BarcodeOptionsVm implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'outputFileType' => 'string',
        'tiffUse1BitFormat' => 'bool',
        'produceMonochromeImages' => 'bool',
        'additionalCaption' => 'string',
        'addChecksum' => 'bool',
        'addChecksumToCaption' => 'bool',
        'caption' => 'string',
        'drawCaption' => 'bool',
        'drawCaptionFor2DBarcodes' => 'bool',
        'drawQuietZones' => 'bool',
        'symbology' => 'string',
        'supplementValue' => 'string',
        'additionalCaptionFont' => 'string',
        'barHeight' => 'int',
        'captionFont' => 'string',
        'narrowBarWidth' => 'int',
        'wideToNarrowRatio' => 'int',
        'additionalCaptionPosition' => 'string',
        'angle' => 'string',
        'backColor' => 'string',
        'captionPosition' => 'string',
        'foreColor' => 'string',
        'margins' => '\Bytescout\Client\Model\MarginsVm',
        'smoothingMode' => 'string',
        'renderingHint' => 'string',
        'resolutionX' => 'float',
        'resolutionY' => 'float',
        'cutUnusedSpace' => 'bool',
        'preserveMinReadableSize' => 'bool',
        'size' => '\Bytescout\Client\Model\BarCodeSizeVm'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'outputFileType' => 'outputFileType',
        'tiffUse1BitFormat' => 'tiffUse1BitFormat',
        'produceMonochromeImages' => 'produceMonochromeImages',
        'additionalCaption' => 'additionalCaption',
        'addChecksum' => 'addChecksum',
        'addChecksumToCaption' => 'addChecksumToCaption',
        'caption' => 'caption',
        'drawCaption' => 'drawCaption',
        'drawCaptionFor2DBarcodes' => 'drawCaptionFor2DBarcodes',
        'drawQuietZones' => 'drawQuietZones',
        'symbology' => 'symbology',
        'supplementValue' => 'supplementValue',
        'additionalCaptionFont' => 'additionalCaptionFont',
        'barHeight' => 'barHeight',
        'captionFont' => 'captionFont',
        'narrowBarWidth' => 'narrowBarWidth',
        'wideToNarrowRatio' => 'wideToNarrowRatio',
        'additionalCaptionPosition' => 'additionalCaptionPosition',
        'angle' => 'angle',
        'backColor' => 'backColor',
        'captionPosition' => 'captionPosition',
        'foreColor' => 'foreColor',
        'margins' => 'margins',
        'smoothingMode' => 'smoothingMode',
        'renderingHint' => 'renderingHint',
        'resolutionX' => 'resolutionX',
        'resolutionY' => 'resolutionY',
        'cutUnusedSpace' => 'cutUnusedSpace',
        'preserveMinReadableSize' => 'preserveMinReadableSize',
        'size' => 'size'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'outputFileType' => 'setOutputFileType',
        'tiffUse1BitFormat' => 'setTiffUse1BitFormat',
        'produceMonochromeImages' => 'setProduceMonochromeImages',
        'additionalCaption' => 'setAdditionalCaption',
        'addChecksum' => 'setAddChecksum',
        'addChecksumToCaption' => 'setAddChecksumToCaption',
        'caption' => 'setCaption',
        'drawCaption' => 'setDrawCaption',
        'drawCaptionFor2DBarcodes' => 'setDrawCaptionFor2DBarcodes',
        'drawQuietZones' => 'setDrawQuietZones',
        'symbology' => 'setSymbology',
        'supplementValue' => 'setSupplementValue',
        'additionalCaptionFont' => 'setAdditionalCaptionFont',
        'barHeight' => 'setBarHeight',
        'captionFont' => 'setCaptionFont',
        'narrowBarWidth' => 'setNarrowBarWidth',
        'wideToNarrowRatio' => 'setWideToNarrowRatio',
        'additionalCaptionPosition' => 'setAdditionalCaptionPosition',
        'angle' => 'setAngle',
        'backColor' => 'setBackColor',
        'captionPosition' => 'setCaptionPosition',
        'foreColor' => 'setForeColor',
        'margins' => 'setMargins',
        'smoothingMode' => 'setSmoothingMode',
        'renderingHint' => 'setRenderingHint',
        'resolutionX' => 'setResolutionX',
        'resolutionY' => 'setResolutionY',
        'cutUnusedSpace' => 'setCutUnusedSpace',
        'preserveMinReadableSize' => 'setPreserveMinReadableSize',
        'size' => 'setSize'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'outputFileType' => 'getOutputFileType',
        'tiffUse1BitFormat' => 'getTiffUse1BitFormat',
        'produceMonochromeImages' => 'getProduceMonochromeImages',
        'additionalCaption' => 'getAdditionalCaption',
        'addChecksum' => 'getAddChecksum',
        'addChecksumToCaption' => 'getAddChecksumToCaption',
        'caption' => 'getCaption',
        'drawCaption' => 'getDrawCaption',
        'drawCaptionFor2DBarcodes' => 'getDrawCaptionFor2DBarcodes',
        'drawQuietZones' => 'getDrawQuietZones',
        'symbology' => 'getSymbology',
        'supplementValue' => 'getSupplementValue',
        'additionalCaptionFont' => 'getAdditionalCaptionFont',
        'barHeight' => 'getBarHeight',
        'captionFont' => 'getCaptionFont',
        'narrowBarWidth' => 'getNarrowBarWidth',
        'wideToNarrowRatio' => 'getWideToNarrowRatio',
        'additionalCaptionPosition' => 'getAdditionalCaptionPosition',
        'angle' => 'getAngle',
        'backColor' => 'getBackColor',
        'captionPosition' => 'getCaptionPosition',
        'foreColor' => 'getForeColor',
        'margins' => 'getMargins',
        'smoothingMode' => 'getSmoothingMode',
        'renderingHint' => 'getRenderingHint',
        'resolutionX' => 'getResolutionX',
        'resolutionY' => 'getResolutionY',
        'cutUnusedSpace' => 'getCutUnusedSpace',
        'preserveMinReadableSize' => 'getPreserveMinReadableSize',
        'size' => 'getSize'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $outputFileType File format in which barcode will be generated.\r\n            Default value: PNG file
      * @var string
      */
    protected $outputFileType;
    
    /**
      * $tiffUse1BitFormat Default value: False
      * @var bool
      */
    protected $tiffUse1BitFormat;
    
    /**
      * $produceMonochromeImages Default value: False
      * @var bool
      */
    protected $produceMonochromeImages;
    
    /**
      * $additionalCaption Default value:
      * @var string
      */
    protected $additionalCaption;
    
    /**
      * $addChecksum Default value: False
      * @var bool
      */
    protected $addChecksum;
    
    /**
      * $addChecksumToCaption Default value: False
      * @var bool
      */
    protected $addChecksumToCaption;
    
    /**
      * $caption 
      * @var string
      */
    protected $caption;
    
    /**
      * $drawCaption Default value: True
      * @var bool
      */
    protected $drawCaption;
    
    /**
      * $drawCaptionFor2DBarcodes Default value: False
      * @var bool
      */
    protected $drawCaptionFor2DBarcodes;
    
    /**
      * $drawQuietZones Default value: True
      * @var bool
      */
    protected $drawQuietZones;
    
    /**
      * $symbology Default value: Code39
      * @var string
      */
    protected $symbology;
    
    /**
      * $supplementValue Default value:
      * @var string
      */
    protected $supplementValue;
    
    /**
      * $additionalCaptionFont Default value: Arial, 12
      * @var string
      */
    protected $additionalCaptionFont;
    
    /**
      * $barHeight Default value: 50
      * @var int
      */
    protected $barHeight;
    
    /**
      * $captionFont Default value: Arial, 12
      * @var string
      */
    protected $captionFont;
    
    /**
      * $narrowBarWidth Default value: 3
      * @var int
      */
    protected $narrowBarWidth;
    
    /**
      * $wideToNarrowRatio Default value: 3
      * @var int
      */
    protected $wideToNarrowRatio;
    
    /**
      * $additionalCaptionPosition Default value: Above
      * @var string
      */
    protected $additionalCaptionPosition;
    
    /**
      * $angle Default value: Degrees0
      * @var string
      */
    protected $angle;
    
    /**
      * $backColor Default value: Color [White]
      * @var string
      */
    protected $backColor;
    
    /**
      * $captionPosition Default value: Below
      * @var string
      */
    protected $captionPosition;
    
    /**
      * $foreColor Default value: Color [Black]
      * @var string
      */
    protected $foreColor;
    
    /**
      * $margins Default value: [10;10;10;10]
      * @var \Bytescout\Client\Model\MarginsVm
      */
    protected $margins;
    
    /**
      * $smoothingMode Default value: Default
      * @var string
      */
    protected $smoothingMode;
    
    /**
      * $renderingHint Default value: SystemDefault
      * @var string
      */
    protected $renderingHint;
    
    /**
      * $resolutionX Default value: 96
      * @var float
      */
    protected $resolutionX;
    
    /**
      * $resolutionY Default value: 96
      * @var float
      */
    protected $resolutionY;
    
    /**
      * $cutUnusedSpace Default value: False
      * @var bool
      */
    protected $cutUnusedSpace;
    
    /**
      * $preserveMinReadableSize Default value: True
      * @var bool
      */
    protected $preserveMinReadableSize;
    
    /**
      * $size The size of area specified in units in which barcode will be generated.
      * @var \Bytescout\Client\Model\BarCodeSizeVm
      */
    protected $size;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->outputFileType = $data["outputFileType"];
            $this->tiffUse1BitFormat = $data["tiffUse1BitFormat"];
            $this->produceMonochromeImages = $data["produceMonochromeImages"];
            $this->additionalCaption = $data["additionalCaption"];
            $this->addChecksum = $data["addChecksum"];
            $this->addChecksumToCaption = $data["addChecksumToCaption"];
            $this->caption = $data["caption"];
            $this->drawCaption = $data["drawCaption"];
            $this->drawCaptionFor2DBarcodes = $data["drawCaptionFor2DBarcodes"];
            $this->drawQuietZones = $data["drawQuietZones"];
            $this->symbology = $data["symbology"];
            $this->supplementValue = $data["supplementValue"];
            $this->additionalCaptionFont = $data["additionalCaptionFont"];
            $this->barHeight = $data["barHeight"];
            $this->captionFont = $data["captionFont"];
            $this->narrowBarWidth = $data["narrowBarWidth"];
            $this->wideToNarrowRatio = $data["wideToNarrowRatio"];
            $this->additionalCaptionPosition = $data["additionalCaptionPosition"];
            $this->angle = $data["angle"];
            $this->backColor = $data["backColor"];
            $this->captionPosition = $data["captionPosition"];
            $this->foreColor = $data["foreColor"];
            $this->margins = $data["margins"];
            $this->smoothingMode = $data["smoothingMode"];
            $this->renderingHint = $data["renderingHint"];
            $this->resolutionX = $data["resolutionX"];
            $this->resolutionY = $data["resolutionY"];
            $this->cutUnusedSpace = $data["cutUnusedSpace"];
            $this->preserveMinReadableSize = $data["preserveMinReadableSize"];
            $this->size = $data["size"];
        }
    }
    
    /**
     * Gets outputFileType
     * @return string
     */
    public function getOutputFileType()
    {
        return $this->outputFileType;
    }
  
    /**
     * Sets outputFileType
     * @param string $outputFileType File format in which barcode will be generated.\r\n            Default value: PNG file
     * @return $this
     */
    public function setOutputFileType($outputFileType)
    {
        $allowed_values = array("png", "bmp", "jpeg");
        if (!in_array($outputFileType, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'outputFileType', must be one of 'png', 'bmp', 'jpeg'");
        }
        $this->outputFileType = $outputFileType;
        return $this;
    }
    
    /**
     * Gets tiffUse1BitFormat
     * @return bool
     */
    public function getTiffUse1BitFormat()
    {
        return $this->tiffUse1BitFormat;
    }
  
    /**
     * Sets tiffUse1BitFormat
     * @param bool $tiffUse1BitFormat Default value: False
     * @return $this
     */
    public function setTiffUse1BitFormat($tiffUse1BitFormat)
    {
        
        $this->tiffUse1BitFormat = $tiffUse1BitFormat;
        return $this;
    }
    
    /**
     * Gets produceMonochromeImages
     * @return bool
     */
    public function getProduceMonochromeImages()
    {
        return $this->produceMonochromeImages;
    }
  
    /**
     * Sets produceMonochromeImages
     * @param bool $produceMonochromeImages Default value: False
     * @return $this
     */
    public function setProduceMonochromeImages($produceMonochromeImages)
    {
        
        $this->produceMonochromeImages = $produceMonochromeImages;
        return $this;
    }
    
    /**
     * Gets additionalCaption
     * @return string
     */
    public function getAdditionalCaption()
    {
        return $this->additionalCaption;
    }
  
    /**
     * Sets additionalCaption
     * @param string $additionalCaption Default value:
     * @return $this
     */
    public function setAdditionalCaption($additionalCaption)
    {
        
        $this->additionalCaption = $additionalCaption;
        return $this;
    }
    
    /**
     * Gets addChecksum
     * @return bool
     */
    public function getAddChecksum()
    {
        return $this->addChecksum;
    }
  
    /**
     * Sets addChecksum
     * @param bool $addChecksum Default value: False
     * @return $this
     */
    public function setAddChecksum($addChecksum)
    {
        
        $this->addChecksum = $addChecksum;
        return $this;
    }
    
    /**
     * Gets addChecksumToCaption
     * @return bool
     */
    public function getAddChecksumToCaption()
    {
        return $this->addChecksumToCaption;
    }
  
    /**
     * Sets addChecksumToCaption
     * @param bool $addChecksumToCaption Default value: False
     * @return $this
     */
    public function setAddChecksumToCaption($addChecksumToCaption)
    {
        
        $this->addChecksumToCaption = $addChecksumToCaption;
        return $this;
    }
    
    /**
     * Gets caption
     * @return string
     */
    public function getCaption()
    {
        return $this->caption;
    }
  
    /**
     * Sets caption
     * @param string $caption 
     * @return $this
     */
    public function setCaption($caption)
    {
        
        $this->caption = $caption;
        return $this;
    }
    
    /**
     * Gets drawCaption
     * @return bool
     */
    public function getDrawCaption()
    {
        return $this->drawCaption;
    }
  
    /**
     * Sets drawCaption
     * @param bool $drawCaption Default value: True
     * @return $this
     */
    public function setDrawCaption($drawCaption)
    {
        
        $this->drawCaption = $drawCaption;
        return $this;
    }
    
    /**
     * Gets drawCaptionFor2DBarcodes
     * @return bool
     */
    public function getDrawCaptionFor2DBarcodes()
    {
        return $this->drawCaptionFor2DBarcodes;
    }
  
    /**
     * Sets drawCaptionFor2DBarcodes
     * @param bool $drawCaptionFor2DBarcodes Default value: False
     * @return $this
     */
    public function setDrawCaptionFor2DBarcodes($drawCaptionFor2DBarcodes)
    {
        
        $this->drawCaptionFor2DBarcodes = $drawCaptionFor2DBarcodes;
        return $this;
    }
    
    /**
     * Gets drawQuietZones
     * @return bool
     */
    public function getDrawQuietZones()
    {
        return $this->drawQuietZones;
    }
  
    /**
     * Sets drawQuietZones
     * @param bool $drawQuietZones Default value: True
     * @return $this
     */
    public function setDrawQuietZones($drawQuietZones)
    {
        
        $this->drawQuietZones = $drawQuietZones;
        return $this;
    }
    
    /**
     * Gets symbology
     * @return string
     */
    public function getSymbology()
    {
        return $this->symbology;
    }
  
    /**
     * Sets symbology
     * @param string $symbology Default value: Code39
     * @return $this
     */
    public function setSymbology($symbology)
    {
        $allowed_values = array("code128", "code39", "postnet", "upca", "ean8", "isbn", "codabar", "i2of5", "code93", "ean13", "jan13", "bookland", "upce", "pdf417", "pdf417Truncated", "dataMatrix", "qrCode", "aztec", "planet", "ean128", "gs1_128", "uspsSackLabel", "uspsTrayLabel", "deutschePostIdentcode", "deutschePostLeitcode", "numly", "pzn", "opticalProduct", "swissPostParcel", "royalMail", "dutchKix", "singaporePostalCode", "ean2", "ean5", "ean14", "macroPDF417", "microPDF417", "gs1_DataMatrix", "telepen", "intelligentMail", "gs1_DataBar_Omnidirectional", "gs1_DataBar_Truncated", "gs1_DataBar_Stacked", "gs1_DataBar_Stacked_Omnidirectional", "gs1_DataBar_Limited", "gs1_DataBar_Expanded", "gs1_DataBar_Expanded_Stacked", "maxiCode", "plessey", "msi", "itf14", "gtin12", "gtin8", "gtin13", "gtin14");
        if (!in_array($symbology, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'symbology', must be one of 'code128', 'code39', 'postnet', 'upca', 'ean8', 'isbn', 'codabar', 'i2of5', 'code93', 'ean13', 'jan13', 'bookland', 'upce', 'pdf417', 'pdf417Truncated', 'dataMatrix', 'qrCode', 'aztec', 'planet', 'ean128', 'gs1_128', 'uspsSackLabel', 'uspsTrayLabel', 'deutschePostIdentcode', 'deutschePostLeitcode', 'numly', 'pzn', 'opticalProduct', 'swissPostParcel', 'royalMail', 'dutchKix', 'singaporePostalCode', 'ean2', 'ean5', 'ean14', 'macroPDF417', 'microPDF417', 'gs1_DataMatrix', 'telepen', 'intelligentMail', 'gs1_DataBar_Omnidirectional', 'gs1_DataBar_Truncated', 'gs1_DataBar_Stacked', 'gs1_DataBar_Stacked_Omnidirectional', 'gs1_DataBar_Limited', 'gs1_DataBar_Expanded', 'gs1_DataBar_Expanded_Stacked', 'maxiCode', 'plessey', 'msi', 'itf14', 'gtin12', 'gtin8', 'gtin13', 'gtin14'");
        }
        $this->symbology = $symbology;
        return $this;
    }
    
    /**
     * Gets supplementValue
     * @return string
     */
    public function getSupplementValue()
    {
        return $this->supplementValue;
    }
  
    /**
     * Sets supplementValue
     * @param string $supplementValue Default value:
     * @return $this
     */
    public function setSupplementValue($supplementValue)
    {
        
        $this->supplementValue = $supplementValue;
        return $this;
    }
    
    /**
     * Gets additionalCaptionFont
     * @return string
     */
    public function getAdditionalCaptionFont()
    {
        return $this->additionalCaptionFont;
    }
  
    /**
     * Sets additionalCaptionFont
     * @param string $additionalCaptionFont Default value: Arial, 12
     * @return $this
     */
    public function setAdditionalCaptionFont($additionalCaptionFont)
    {
        
        $this->additionalCaptionFont = $additionalCaptionFont;
        return $this;
    }
    
    /**
     * Gets barHeight
     * @return int
     */
    public function getBarHeight()
    {
        return $this->barHeight;
    }
  
    /**
     * Sets barHeight
     * @param int $barHeight Default value: 50
     * @return $this
     */
    public function setBarHeight($barHeight)
    {
        
        $this->barHeight = $barHeight;
        return $this;
    }
    
    /**
     * Gets captionFont
     * @return string
     */
    public function getCaptionFont()
    {
        return $this->captionFont;
    }
  
    /**
     * Sets captionFont
     * @param string $captionFont Default value: Arial, 12
     * @return $this
     */
    public function setCaptionFont($captionFont)
    {
        
        $this->captionFont = $captionFont;
        return $this;
    }
    
    /**
     * Gets narrowBarWidth
     * @return int
     */
    public function getNarrowBarWidth()
    {
        return $this->narrowBarWidth;
    }
  
    /**
     * Sets narrowBarWidth
     * @param int $narrowBarWidth Default value: 3
     * @return $this
     */
    public function setNarrowBarWidth($narrowBarWidth)
    {
        
        $this->narrowBarWidth = $narrowBarWidth;
        return $this;
    }
    
    /**
     * Gets wideToNarrowRatio
     * @return int
     */
    public function getWideToNarrowRatio()
    {
        return $this->wideToNarrowRatio;
    }
  
    /**
     * Sets wideToNarrowRatio
     * @param int $wideToNarrowRatio Default value: 3
     * @return $this
     */
    public function setWideToNarrowRatio($wideToNarrowRatio)
    {
        
        $this->wideToNarrowRatio = $wideToNarrowRatio;
        return $this;
    }
    
    /**
     * Gets additionalCaptionPosition
     * @return string
     */
    public function getAdditionalCaptionPosition()
    {
        return $this->additionalCaptionPosition;
    }
  
    /**
     * Sets additionalCaptionPosition
     * @param string $additionalCaptionPosition Default value: Above
     * @return $this
     */
    public function setAdditionalCaptionPosition($additionalCaptionPosition)
    {
        $allowed_values = array("above", "below", "before", "after");
        if (!in_array($additionalCaptionPosition, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'additionalCaptionPosition', must be one of 'above', 'below', 'before', 'after'");
        }
        $this->additionalCaptionPosition = $additionalCaptionPosition;
        return $this;
    }
    
    /**
     * Gets angle
     * @return string
     */
    public function getAngle()
    {
        return $this->angle;
    }
  
    /**
     * Sets angle
     * @param string $angle Default value: Degrees0
     * @return $this
     */
    public function setAngle($angle)
    {
        $allowed_values = array("degrees0", "degrees90", "degrees180", "degrees270");
        if (!in_array($angle, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'angle', must be one of 'degrees0', 'degrees90', 'degrees180', 'degrees270'");
        }
        $this->angle = $angle;
        return $this;
    }
    
    /**
     * Gets backColor
     * @return string
     */
    public function getBackColor()
    {
        return $this->backColor;
    }
  
    /**
     * Sets backColor
     * @param string $backColor Default value: Color [White]
     * @return $this
     */
    public function setBackColor($backColor)
    {
        
        $this->backColor = $backColor;
        return $this;
    }
    
    /**
     * Gets captionPosition
     * @return string
     */
    public function getCaptionPosition()
    {
        return $this->captionPosition;
    }
  
    /**
     * Sets captionPosition
     * @param string $captionPosition Default value: Below
     * @return $this
     */
    public function setCaptionPosition($captionPosition)
    {
        $allowed_values = array("above", "below", "before", "after");
        if (!in_array($captionPosition, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'captionPosition', must be one of 'above', 'below', 'before', 'after'");
        }
        $this->captionPosition = $captionPosition;
        return $this;
    }
    
    /**
     * Gets foreColor
     * @return string
     */
    public function getForeColor()
    {
        return $this->foreColor;
    }
  
    /**
     * Sets foreColor
     * @param string $foreColor Default value: Color [Black]
     * @return $this
     */
    public function setForeColor($foreColor)
    {
        
        $this->foreColor = $foreColor;
        return $this;
    }
    
    /**
     * Gets margins
     * @return \Bytescout\Client\Model\MarginsVm
     */
    public function getMargins()
    {
        return $this->margins;
    }
  
    /**
     * Sets margins
     * @param \Bytescout\Client\Model\MarginsVm $margins Default value: [10;10;10;10]
     * @return $this
     */
    public function setMargins($margins)
    {
        
        $this->margins = $margins;
        return $this;
    }
    
    /**
     * Gets smoothingMode
     * @return string
     */
    public function getSmoothingMode()
    {
        return $this->smoothingMode;
    }
  
    /**
     * Sets smoothingMode
     * @param string $smoothingMode Default value: Default
     * @return $this
     */
    public function setSmoothingMode($smoothingMode)
    {
        $allowed_values = array("default", "highSpeed", "highQuality", "none", "antiAlias", "invalid");
        if (!in_array($smoothingMode, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'smoothingMode', must be one of 'default', 'highSpeed', 'highQuality', 'none', 'antiAlias', 'invalid'");
        }
        $this->smoothingMode = $smoothingMode;
        return $this;
    }
    
    /**
     * Gets renderingHint
     * @return string
     */
    public function getRenderingHint()
    {
        return $this->renderingHint;
    }
  
    /**
     * Sets renderingHint
     * @param string $renderingHint Default value: SystemDefault
     * @return $this
     */
    public function setRenderingHint($renderingHint)
    {
        $allowed_values = array("systemDefault", "singleBitPerPixelGridFit", "singleBitPerPixel", "antiAliasGridFit", "antiAlias", "clearTypeGridFit");
        if (!in_array($renderingHint, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'renderingHint', must be one of 'systemDefault', 'singleBitPerPixelGridFit', 'singleBitPerPixel', 'antiAliasGridFit', 'antiAlias', 'clearTypeGridFit'");
        }
        $this->renderingHint = $renderingHint;
        return $this;
    }
    
    /**
     * Gets resolutionX
     * @return float
     */
    public function getResolutionX()
    {
        return $this->resolutionX;
    }
  
    /**
     * Sets resolutionX
     * @param float $resolutionX Default value: 96
     * @return $this
     */
    public function setResolutionX($resolutionX)
    {
        
        $this->resolutionX = $resolutionX;
        return $this;
    }
    
    /**
     * Gets resolutionY
     * @return float
     */
    public function getResolutionY()
    {
        return $this->resolutionY;
    }
  
    /**
     * Sets resolutionY
     * @param float $resolutionY Default value: 96
     * @return $this
     */
    public function setResolutionY($resolutionY)
    {
        
        $this->resolutionY = $resolutionY;
        return $this;
    }
    
    /**
     * Gets cutUnusedSpace
     * @return bool
     */
    public function getCutUnusedSpace()
    {
        return $this->cutUnusedSpace;
    }
  
    /**
     * Sets cutUnusedSpace
     * @param bool $cutUnusedSpace Default value: False
     * @return $this
     */
    public function setCutUnusedSpace($cutUnusedSpace)
    {
        
        $this->cutUnusedSpace = $cutUnusedSpace;
        return $this;
    }
    
    /**
     * Gets preserveMinReadableSize
     * @return bool
     */
    public function getPreserveMinReadableSize()
    {
        return $this->preserveMinReadableSize;
    }
  
    /**
     * Sets preserveMinReadableSize
     * @param bool $preserveMinReadableSize Default value: True
     * @return $this
     */
    public function setPreserveMinReadableSize($preserveMinReadableSize)
    {
        
        $this->preserveMinReadableSize = $preserveMinReadableSize;
        return $this;
    }
    
    /**
     * Gets size
     * @return \Bytescout\Client\Model\BarCodeSizeVm
     */
    public function getSize()
    {
        return $this->size;
    }
  
    /**
     * Sets size
     * @param \Bytescout\Client\Model\BarCodeSizeVm $size The size of area specified in units in which barcode will be generated.
     * @return $this
     */
    public function setSize($size)
    {
        
        $this->size = $size;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Bytescout\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
